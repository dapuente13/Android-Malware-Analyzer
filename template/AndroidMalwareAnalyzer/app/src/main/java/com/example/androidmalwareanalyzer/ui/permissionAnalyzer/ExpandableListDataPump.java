package com.example.androidmalwareanalyzer.ui.permissionAnalyzer;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ExpandableListDataPump extends Fragment {
    private MalwareDB dbHelper;
    private List<PackageInfo> installedApps;
    private HashMap<String, List<AppScore>> expandableListDetail = new HashMap<String, List<AppScore>>();
    private PackageManager pm;
    private String app_name = "";
    private ProgressBar pb;
    private int progress = 0;

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        pm = getActivity().getPackageManager();
        View v = inflater.inflate(R.layout.permissions_progressbar,container,false);
        pb = v.findViewById(R.id.progressBar);

        installedApps = getInstalledApps(pm);
        pb.setMax(installedApps.size());

        setDB();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Handler handler = new Handler(Looper.getMainLooper());
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                expandableListDetail= getData(pm);
                executorService.shutdown();
            }
        });
        handler.post(new Runnable() {
            @Override
            public void run() {
                while(!executorService.isTerminated()){
                    pb.setProgress(progress+1);
                }

                PermissionAnalysisProcess fragment = new PermissionAnalysisProcess(expandableListDetail, dbHelper);
                FragmentManager manager = getParentFragmentManager();
                manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
            }
        });

        return v;
    }

    public HashMap<String, List<AppScore>> getData(PackageManager pm) {

        List<AppScore> dangerous = new ArrayList<AppScore>();
        List<AppScore> deprecated = new ArrayList<AppScore>();
        List<AppScore> prohibidas = new ArrayList<AppScore>();

        for (int i = 0; i < installedApps.size(); ++i){
            ++progress;
            PackageInfo app = installedApps.get(i);
            app_name = app.applicationInfo.loadLabel(pm)+"";

            System.out.println("HEEY: " + i +" "+app_name);
            AppScore as = new AppScore(app);


            for (int j = 0; j < app.requestedPermissions.length; ++j){
                String permiso = app.requestedPermissions[j];
               int score = dbHelper.getScore(permiso);

                switch (score){
                    case 1: as.setNorm(permiso);
                        break;
                    case 2: as.setSig(permiso);
                        break;
                    case 4: as.setDangerous(permiso);
                        break;
                    case 5: as.setDeprec(permiso);
                        break;
                    case 6: as.setProhib(permiso);
                        break;
                    default: as.setUnk(permiso);
                }
            }
            as.setFilled(true);
            if (as.getDangerous().size() > 0){ dangerous.add(as); }
            if (as.getDeprec().size() > 0){ deprecated.add(as); }
            if (as.getProhib().size() > 0){ prohibidas.add(as); }
        }
        expandableListDetail.put("Dangerous permissions", dangerous);
        expandableListDetail.put("Deprecated permissions", deprecated);
        expandableListDetail.put("Forbidden permissions", prohibidas);

        return expandableListDetail;
    }

    //Return a list of the installed apps
    private List<PackageInfo> getInstalledApps(PackageManager pm) {
        List<PackageInfo> apps = new ArrayList<>();//return
        List<PackageInfo> packs = pm.getInstalledPackages(pm.GET_PERMISSIONS);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                apps.add(p);
            }
        }

        Collections.sort(apps, new Comparator<PackageInfo>() {
            @Override
            public int compare(PackageInfo app2, PackageInfo app1)
            {
                return  app2.applicationInfo.loadLabel(pm).toString().compareToIgnoreCase(app1.applicationInfo.loadLabel(pm).toString());
            }
        });
        return apps;
    }

    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }

    private void setDB(){
        dbHelper = new MalwareDB(getContext());
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        if (db != null) {
            //dbHelper.DeleteDB();
            dbHelper.InitializeDBPermissions(db);
            dbHelper.InitializeDBDomains(db);
        }
    }

}