package com.example.androidmalwareanalyzer.ui.logAnalyzer;

import android.graphics.drawable.Drawable;

import java.util.ArrayList;
import java.util.Collections;

public class LogResult {
    private ArrayList<LogInteractions> logs_result_list;

    public class LogInteractions implements Comparable<LogInteractions> {
        private String element = "";
        private String appname = "";
        private Drawable icon;
        private int total_interactions = 0;
        private ArrayList<SubElements> sub_elements;
        private boolean is_expanded = false;

        public LogInteractions() {
            sub_elements = new ArrayList<>();
        }

        public class SubElements implements Comparable<SubElements> {
            private String element = "";
            private String appname = "";
            private Drawable icon;
            private int interactions = 0;
            private boolean permission_granted = false;

            public SubElements (String element, int interactions) {
                this.setElement(element);
                this.setTotal_interactions(interactions);
            }

            public void setElement(String element) { this.element = element; }
            public String getElement() { return element; }
            public String getAppName() {
                return appname;
            }
            public void setAppName(String appName) { appname = appName; }
            public Drawable getAppIcon() {
                return icon;
            }
            public void setAppIcon(Drawable appIcon) {
                icon = appIcon;
            }
            public int getTotal_interactions() { return interactions; }
            public void setTotal_interactions(int total_interactions) { this.interactions = total_interactions; }
            public void addTotal_interactions(int total_interactions) { this.interactions += total_interactions; }
            public boolean isPermissionGranted() { return this.permission_granted; }
            public void setPermissionGranted(boolean status) { this.permission_granted = status; }

            @Override
            public int compareTo(SubElements o) {
                if (interactions == o.getTotal_interactions())
                    return 0;
                else if (interactions > o.getTotal_interactions())
                    return -1;
                else
                    return 1;
            }
        }

        public void setElement(String element) { this.element = element; }
        public String getElement() { return element; }
        public String getAppName() {
            return appname;
        }
        public void setAppName(String appName) { appname = appName; }
        public Drawable getAppIcon() {
            return icon;
        }
        public void setAppIcon(Drawable appIcon) {
            icon = appIcon;
        }
        public int getTotal_interactions() { return total_interactions; }
        public void setTotal_interactions(int total_interactions) { this.total_interactions = total_interactions; }
        public void addTotal_interactions(int total_interactions) { this.total_interactions += total_interactions; }
        public int getSubElementsSize() { return this.sub_elements.size(); }
        public String getSubElement(int index) { return this.sub_elements.get(index).getElement(); }
        public ArrayList<SubElements> getSubElements() { return this.sub_elements; }
        public int getSubElementInteractions(int index) { return this.sub_elements.get(index).getTotal_interactions(); }
        public void setSubElementInteractions(int index, int interactions) { this.sub_elements.get(index).addTotal_interactions(interactions); }
        public boolean isSubElementPermissionGranted(int index) { return this.sub_elements.get(index).isPermissionGranted(); }
        public void setSubElementPermissionGranted(int index, boolean status) { this.sub_elements.get(index).setPermissionGranted(status); }
        public void setSubElementApp(int index, String appname, Drawable icon) {
            this.sub_elements.get(index).setAppName(appname);
            this.sub_elements.get(index).setAppIcon(icon);
        }
        public void addSubElement(String element, int interactions) {
            SubElements new_element = new SubElements(element, interactions);
            this.sub_elements.add(new_element);
        }
        public void sortSubElements() { Collections.sort(sub_elements); }
        public boolean isExpanded() { return is_expanded; }
        public void setExpanded(boolean expand) { this.is_expanded = expand; }

        @Override
        public int compareTo(LogInteractions o) {
            if (total_interactions == o.getTotal_interactions())
                return 0;
            else if (total_interactions > o.getTotal_interactions())
                return -1;
            else
                return 1;
        }
    }

    public LogResult(String msg) {
        logs_result_list = new ArrayList<LogInteractions>();
        parseResult(msg);
    }

    private String parseElement(String element) {
        switch (element) {
            case "sms": case "mms":
                return "SMS/MMS";
            case "location": case "gps":
                return "Location";
            case "camera":
                return "Camera";
            case "microphone": case "sound": case "recorder":
                return "Microphone";
            case "telephon":
                return "Telephone";
            case "bluetooth":
                return "Bluetooth";
            case "wifi": case "network":
                return "Internet";
            case "messag":
                return "Messaging";
            case "storage":
                return "Storage";
            case "sdcard":
                return "SDcard";
            case "contact":
                return "Contacts";
            case "nfc":
                return "NFC";
            case "mail":
                return "Mail";
            case "account":
                return "Accounts";
            default:
                return element;
        }
    }

    public void parseResult(String msg) {
        boolean found = false;
        //com.example.app camera 15
        String[] msg_lines = msg.split("\n");
        String firstElement, secondElement;
        int thirdElement;

        for (int i = 0; i < msg_lines.length; ++i) {
            String[] msg_values = msg_lines[i].split(" ");
            found = false;

            firstElement = parseElement(msg_values[0]);
            secondElement = parseElement(msg_values[1]);
            thirdElement = Integer.parseInt(msg_values[2]);

            for (int j = 0; j < logs_result_list.size() && !found; ++j) {
                if (logs_result_list.get(j).getElement().equals(firstElement)) {
                    found = true;

                    if (secondElement.equals("-"))
                        logs_result_list.get(j).addTotal_interactions(thirdElement);
                    else {
                        boolean sub_element_found = false;
                        for (int k = 0; k < logs_result_list.get(j).getSubElementsSize() && !sub_element_found; ++k) {
                            if (logs_result_list.get(j).getSubElement(k).equals(secondElement)) {
                                sub_element_found = true;
                                logs_result_list.get(j).setSubElementInteractions(k, thirdElement);
                            }
                        }

                        if (!sub_element_found)
                            logs_result_list.get(j).addSubElement(secondElement, thirdElement);
                    }
                }
            }

            if (!found) {
                LogInteractions new_element = new LogInteractions();
                new_element.setElement(firstElement);

                if (secondElement.equals("-"))
                    new_element.setTotal_interactions(thirdElement);
                else {
                    new_element.addSubElement(secondElement, thirdElement);
                }
                logs_result_list.add(new_element);
            }
        }

        for (int i = 0; i < logs_result_list.size(); ++i)
            logs_result_list.get(i).sortSubElements();

        Collections.sort(logs_result_list);
    }

    public String returnResult() {
        String msg = "";

        for (int i = 0; i < logs_result_list.size(); ++i) {
                msg += logs_result_list.get(i).getElement() + " - " + logs_result_list.get(i).getTotal_interactions() + "\n";

                for (int j = 0; j < logs_result_list.get(i).getSubElementsSize(); ++j)
                    msg += logs_result_list.get(i).getElement() + " " + logs_result_list.get(i).getSubElement(j) + " " + logs_result_list.get(i).getSubElementInteractions(j) + "\n";
        }

        return msg;
    }

    public ArrayList<LogInteractions> getList() { return logs_result_list; }

    public LogInteractions createEntry(String element, String subElement, boolean permissionGranted) {
        LogInteractions new_element = new LogInteractions();
        new_element.setElement(element);
        new_element.addSubElement(subElement, 0);
        new_element.setSubElementPermissionGranted(0, permissionGranted);

        return new_element;
    }
}
