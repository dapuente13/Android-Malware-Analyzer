package com.example.androidmalwareanalyzer.ui.permissionAnalyzer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import android.content.Context;
import android.graphics.Typeface;
import android.media.Image;
import android.os.Build;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.RequiresApi;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppsListFragment;

public class CustomExpandableListAdapter extends BaseExpandableListAdapter {

    private Context context;
    private List<String> expandableListTitle;
    private HashMap<String, List<AppScore>> expandableListDetail;
    private int totalInstalledApps;
    private AppScore as;
    private List<String> keys = Arrays.asList("Forbidden Permissions", "Dangerous Permissions", "Deprecated Permissions", "Unknown Permissions");

    public CustomExpandableListAdapter(Context context, List<String> expandableListTitle,
                                       HashMap<String, List<AppScore>> expandableListDetail, int totalInstalledApps) {
        this.context = context;
        this.expandableListTitle = expandableListTitle;
        this.expandableListDetail = expandableListDetail;
        this.totalInstalledApps = totalInstalledApps;

    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public Object getChild(int listPosition, int expandedListPosition) {
        List<AppScore> child = expandableListDetail.get(getGroup(listPosition));
        if (child.size() == 0){
            AppScore as = new AppScore((String) getGroup(listPosition));
            child.add(as);
        }

        return child.get(expandedListPosition);
    }

    @Override
    public long getChildId(int listPosition, int expandedListPosition) {
        return expandedListPosition;
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public View getChildView(int listPosition, final int expandedListPosition, boolean isLastChild, View convertView, ViewGroup parent) {

        as = (AppScore) getChild(listPosition, expandedListPosition);

        if (convertView == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = layoutInflater.inflate(R.layout.permissions_item, null);
        }

        TextView expandedListTextView = (TextView) convertView.findViewById(R.id.list_app_name);
        if (as.Filled()){
            ImageView icon = (ImageView) convertView.findViewById(R.id.app_icon);
            icon.setImageDrawable(as.getPInfo().applicationInfo.loadIcon(context.getPackageManager()));

            expandedListTextView.setText(as.getPInfo().applicationInfo.loadLabel(context.getPackageManager())+"");

            TextView app_package = (TextView) convertView.findViewById(R.id.list_app_package);
            app_package.setText("Version " + as.getPInfo().versionName);

            TextView perm = (TextView) convertView.findViewById(R.id.numberperm);
            int total = as.getPInfo().requestedPermissions.length;
            switch (listPosition){
                case 0: perm.setText(as.getProhib().size() + "/" + total);
                    break;
                case 1: perm.setText(as.getDangerous().size() + "/" + total);
                    break;
                case 2: perm.setText(as.getDeprec().size() + "/" + total);
                    break;
                case 3: perm.setText(as.getUnk().size() + "/" + total);

            }
        }
        else{
            expandedListTextView.setText(as.getName());
        }


        return convertView;
    }

    @Override
    public int getChildrenCount(int listPosition) {
        int total = 0;
        for (String key : expandableListDetail.keySet()){
            if(keys.get(listPosition) == key){
                total = expandableListDetail.get(key).size();
            }
        }

        return total;
    }

    @Override
    public Object getGroup(int listPosition) {
        return keys.get(listPosition);
    }

    @Override
    public int getGroupCount() {
        return keys.size();
    }

    @Override
    public long getGroupId(int listPosition) {
        return listPosition;
    }

    @Override
    public View getGroupView(int listPosition, boolean isExpanded,
                             View convertView, ViewGroup parent) {
        String listTitle = (String) getGroup(listPosition);
        if (convertView == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.context.
                    getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = layoutInflater.inflate(R.layout.permissions_group, null);
        }
        TextView listTitleTextView = (TextView) convertView
                .findViewById(R.id.listTitle);
        listTitleTextView.setTypeface(null, Typeface.BOLD);
        listTitleTextView.setText(listTitle);
        TextView numberapps = (TextView) convertView.findViewById(R.id.numberapps);
        numberapps.setText(getChildrenCount(listPosition)+ "/" + totalInstalledApps);

        return convertView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int listPosition, int expandedListPosition) {
        return true;
    }
}