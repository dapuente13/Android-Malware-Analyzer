package com.example.androidmalwareanalyzer.ui.permissionAnalyzer;

import android.content.pm.PackageInfo;
import android.os.Build;

import androidx.annotation.RequiresApi;

import com.example.androidmalwareanalyzer.ui.MalwareDB;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

@RequiresApi(api = Build.VERSION_CODES.O)
public class AppScore {

    //APP
    private PackageInfo app;

    //Quantity Score
    private double quantity_score;

    //Quality Score
    private double quality_score;

    //NAME
    private String name;
    //APP FILLED/NOT FILLED
    private boolean filled = true;

    //SCORE
    private List<String> unk = new ArrayList<>();
    private List<String> norm = new ArrayList<>();
    private List<String> sig = new ArrayList<>();
    private List<String> danger = new ArrayList<>();
    private List<String> deprec = new ArrayList<>();
    private List<String> prohib = new ArrayList<>();

    //DOMAIN
    private HashMap<String, List<String>> domain = new HashMap<>();

    //CATEGORIES
    private final int GAME = 5;
    private final int AUDIO = 6;
    private final int VIDEO = 6;
    private final int IMAGE = 6;
    private final int SOCIAL = 8;
    private final int NEWS = 6;
    private final int MAPS = 7;
    private final int PRODUCTIVITY = 5;
    private List<Integer> category_perm = Arrays.asList(GAME, AUDIO, VIDEO, IMAGE, SOCIAL, NEWS, MAPS, PRODUCTIVITY);
    private float ideal_num_perm = -1;

    //BASE CONSTRUCTOR
    public AppScore(PackageInfo app){
        this.app = app;
        int cat = app.applicationInfo.category;
        if (cat >= 0){
            this.ideal_num_perm = category_perm.get(cat);
        }
        else{
            this.ideal_num_perm = 5;
        }
    }

    //EMPTY CONSTRUCTOR
    public AppScore(String perm){
        name = "No " + perm + "found";
        filled = false;
    }

    //GETS
    public PackageInfo getPInfo(){ return app; }
    public boolean Filled(){ return filled; }
    public HashMap<String, List<String>> getDomain(){ return domain; }
    public List<String> getUnk(){ return unk; }
    public List<String> getNorm(){ return norm; }
    public List<String> getSig(){ return sig; }
    public List<String> getDangerous(){ return danger; }
    public List<String> getDeprec(){ return deprec; }
    public List<String> getProhib(){ return prohib; }
    public String getName(){ return name; }

    public double getQuantity_score(){ return quantity_score; }
    public double getQuality_score(){ return quality_score; }
    public double getTotalScore(){

        double score = quality_score;
        if (quantity_score < quality_score){
            score = quantity_score;
        }

        return score;
    }

    //SETS
    public void setFilled(boolean filled){ this.filled = filled;}
    public void setDomain(String group, String perm, String desc){
        if (domain.containsKey(group)) {
            domain.get(group).add(perm);
        }
        else{
            List<String> list = new ArrayList<>();
            list.add(desc+"\nPermissions found:");
            list.add(perm);
            domain.put(group, list);
        }
    }
    public void setUnk(String perm){ unk.add(perm); }
    public void setNorm(String perm){ norm.add(perm); }
    public void setSig(String perm){ sig.add(perm); }
    public void setDangerous(String perm){ danger.add(perm); }
    public void setDeprec(String perm){ deprec.add(perm); }
    public void setProhib(String perm){ prohib.add(perm);}

    //COMPUTE SCORE
    public void computeQualityScore(){
        float totalPerms = getTotalPerms();
        float prohib_prop = prohib.size()/totalPerms;
        float danger_prop = danger.size()/totalPerms;
        float deprec_prop = deprec.size()/totalPerms;
        float unk_prop = unk.size()/totalPerms;

        double score = 1;
        if (prohib_prop > 0){
            score -= 0.6;
        }
        score = score - danger_prop - 0.75*deprec_prop - 0.5*unk_prop;

        if (score < 0){
            quality_score = 0.0;
        }
        else{
            quality_score = Math.round(score*1000.0)/100.0;
        }
    }

    public void computeQuantityScore(){
        int totalPerms = getTotalPerms();
        float score = 0;
        if(totalPerms < 1){
            score = 10;
        }else if (totalPerms <= 5*ideal_num_perm){
            score = ((5*ideal_num_perm-totalPerms)/ideal_num_perm) * 2;
        }

        quantity_score =  Math.round(score*100.0)/100.0;
    }

    public int getTotalPerms(){ return unk.size()+norm.size()+sig.size()+danger.size()+deprec.size()+prohib.size(); }

    /*
    0 Juegos
    1 Música y audio
    2 Películas y vídeos
    3 Fotos e imágenes
    4 Redes sociales y comunicación
    5 Noticias y revistas
    6 Mapas y navegación
    7 Productividad
     */

}
