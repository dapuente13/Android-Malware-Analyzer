package com.example.androidmalwareanalyzer.ui.serverSettings;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import com.example.androidmalwareanalyzer.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.snackbar.Snackbar;

import org.json.JSONArray;
import org.json.JSONException;

import java.util.ArrayList;
import java.util.List;

public class ServerSettingsFragment extends Fragment {

    private SharedPreferences sp;
    private ListView simpleList;
    private List<String> connectionsList = new ArrayList<String>();
    private int selectedConnection;
    private boolean selected = false;

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_server_settings, container, false);
        final TextView textView = root.findViewById(R.id.text_server_settings);
        textView.setText("Server connections [IPv4:Port]");

        loadConnections();

        simpleList = (ListView) root.findViewById(R.id.list);
        ArrayAdapter<String> arrayAdapter =
                new ArrayAdapter<String>(getActivity(), R.layout.list_text_element, R.id.textElementView, connectionsList);
        simpleList.setAdapter(arrayAdapter);
        simpleList.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

        simpleList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                selected = true;
                selectedConnection = position;
                saveConnections();
            }
        });

        if (selected)
            simpleList.setItemChecked(selectedConnection, true);


        FloatingActionButton addFab = root.findViewById(R.id.fabAdd);
        addFab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final EditText taskEditText = new EditText(view.getContext());
                AlertDialog dialog = new AlertDialog.Builder(view.getContext())
                        .setTitle("Add a new connection")
                        .setMessage("It must follow this format: 127.0.0.1:8888")
                        .setView(taskEditText)
                        .setPositiveButton("Add", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                String newConnection = String.valueOf(taskEditText.getText());
                                boolean badAddress = false;

                                try {
                                    String[] ip_port = newConnection.split("\\:");
                                    String[] parts = ip_port[0].split("\\.");

                                    if (ip_port.length != 2)
                                        throw new IllegalArgumentException("Illegal argument. Only IP address and port needed.");

                                    if (parts.length != 4)
                                        throw new IllegalArgumentException("Illegal length of the IP address.");

                                    for (int i = 0; i < 4; i++) {
                                        try {
                                            int val = Integer.parseInt(parts[i]);
                                            if (val < 0 || val > 255) {
                                                throw new IllegalArgumentException("Illegal value '" + val + "' at byte " + (i + 1) + " in the IP address.");
                                            }
                                        } catch (NumberFormatException e) {
                                            throw new IllegalArgumentException("Illegal value '" + parts[i] + "' at byte " + (i + 1) + " in the IP address.");
                                        }
                                    }

                                    try {
                                        Integer.parseInt(ip_port[1]);
                                    } catch (NumberFormatException e) {
                                        throw new IllegalArgumentException("Illegal value '" + ip_port[1] + "' in the port number.");
                                    }
                                } catch (IllegalArgumentException e) {
                                    badAddress = true;
                                    Snackbar.make(view, e.getMessage(), Snackbar.LENGTH_LONG)
                                            .setAction("Action", null).show();
                                }

                                if (!badAddress) {
                                    connectionsList.add(newConnection);
                                    selected = true;
                                    selectedConnection = connectionsList.size()-1;
                                    simpleList.setItemChecked(selectedConnection, true);

                                    arrayAdapter.notifyDataSetChanged();
                                    saveConnections();

                                    Snackbar.make(view, "Connection added: [" + newConnection + "]", Snackbar.LENGTH_LONG)
                                            .setAction("Action", null).show();
                                }
                            }
                        })
                        .setNegativeButton("Cancel", null)
                        .create();
                dialog.show();
            }
        });

        FloatingActionButton delFab = root.findViewById(R.id.fabDel);
        delFab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(selected) {
                    Snackbar.make(view, "Connection deleted: [" + connectionsList.get(selectedConnection) + "]", Snackbar.LENGTH_LONG)
                            .setAction("Action", null).show();

                    connectionsList.remove(selectedConnection);
                    if (selectedConnection >= connectionsList.size()) {
                        if (selectedConnection != 0) {
                            --selectedConnection;
                            simpleList.setItemChecked(selectedConnection, true);
                        }
                        else
                            selected = false;
                    }

                    arrayAdapter.notifyDataSetChanged();
                    saveConnections();
                }
                else {
                    Snackbar.make(view, "Select the connection to be deleted", Snackbar.LENGTH_LONG)
                            .setAction("Action", null).show();
                }
            }
        });

        return root;
    }

    public void loadConnections() {
        sp = getContext().getSharedPreferences("ServerConnections", Context.MODE_PRIVATE);
        String json = sp.getString("connectionsList", null);

        if (json != null) {
            try {
                JSONArray a = new JSONArray(json);
                for (int i = 0; i < a.length(); ++i) {
                    String connection = a.optString(i);
                    connectionsList.add(connection);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

            selectedConnection = sp.getInt("selectedConnection", -1);
            if (selectedConnection != -1)
                selected = true;
            else
                selected = false;
        }
    }

    public void saveConnections() {
        sp = getContext().getSharedPreferences("ServerConnections", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        JSONArray jsonArray = new JSONArray();

        for (int i = 0; i < connectionsList.size(); ++i)
            jsonArray.put(connectionsList.get(i));

        if (!connectionsList.isEmpty())
            editor.putString("connectionsList", jsonArray.toString());
        else
            editor.putString("connectionsList", null);

        if (selected)
            editor.putInt("selectedConnection", selectedConnection);
        else
            editor.putInt("selectedConnection", -1);

        editor.commit();
    }
}