package com.example.androidmalwareanalyzer.ui.home;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;
import com.example.androidmalwareanalyzer.ui.appsInformation.PermissionFragment;
import com.example.androidmalwareanalyzer.ui.prevResults.ElementsAdapter;
import com.example.androidmalwareanalyzer.ui.prevResults.PrevResultsDB;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HomeFragment extends Fragment {
    private ArrayList<PackageInfoStruct> userApps;
    private ArrayList<PackageInfoStruct> elements_not_analyzed;
    private MalwareDB dbHelper;

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_home, container, false);
        final TextView textViewType = root.findViewById(R.id.home_last_analysis_type);
        final TextView textViewDate = root.findViewById(R.id.home_last_analysis_date);
        final TextView appsDescription = root.findViewById(R.id.home_all_analyzed);

        setDB();
        PrevResultsDB db = new PrevResultsDB(getContext());
        //db.dropDB();
        //db.createDB();
        List<PrevResultsDB.PrevResultsValues> resultsList = db.readAllFromDB();
        db.closeDB();

        if (resultsList.size() == 0) {
            textViewType.setText("No analysis performed yet");
        }
        else {
            textViewType.setText(resultsList.get(0).analysis_type.split(" ")[0] + " analysis");
            textViewDate.setText(resultsList.get(0).date);
        }

        elements_not_analyzed = new ArrayList<PackageInfoStruct>();
        userApps = new ArrayList<PackageInfoStruct>();
        getInstalledApps();

        boolean found;
        for (int q = 0; q < userApps.size(); ++q) {
            found = false;

            for (int i = 0; i < resultsList.size() && !found; ++i) {
                if (resultsList.get(i).analysis_type.equals("Signature analysis result")) {
                    String[] filter_values = resultsList.get(i).apps_analysed.split(",");
                    for (int j = 0; j < filter_values.length && !found; ++j) {
                        if (userApps.get(q).getPackageName().equals(filter_values[j]))
                            found = true;
                    }
                }
            }

            if(!found)
                elements_not_analyzed.add(userApps.get(q));
        }

        if (elements_not_analyzed.size() == 0)
            appsDescription.setText("None");
        else {
            Collections.sort(elements_not_analyzed, (app2, app1) -> app2.getAppName().compareToIgnoreCase(app1.getAppName()));
            
            RecyclerView mRecyclerView = root.findViewById(R.id.not_analyzed_list);
            LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
            mRecyclerView.setLayoutManager(layoutManager);
            RecyclerView.Adapter mAdapter = new ElementsAdapter(getContext(), elements_not_analyzed);
            mRecyclerView.setAdapter(mAdapter);
        }

        return root;
    }

    private void getInstalledApps() {
        Context mContext = getContext();
        List<PackageInfo> packs = mContext.getPackageManager().getInstalledPackages(0);

        for(int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            PackageInfoStruct newInfo = new PackageInfoStruct();
            newInfo.setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
            newInfo.setPackageName(p.packageName);
            newInfo.setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));
            if ((p.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)
                userApps.add(newInfo);
        }
    }

    private void setDB(){
        dbHelper = new MalwareDB(getContext());
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        if (db != null) {
            if (dbHelper.checkEmpty(db, "Permissions")) {
                dbHelper.InitializeDBPermissions(db);
            }
            if (dbHelper.checkEmpty(db, "Domain_Permissions")) {
                dbHelper.InitializeDBDomains(db);
            }
            //dbHelper.DeleteDB();
        }
        dbHelper.close();
    }
}