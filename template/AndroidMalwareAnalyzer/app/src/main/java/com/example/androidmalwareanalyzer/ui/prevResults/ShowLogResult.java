package com.example.androidmalwareanalyzer.ui.prevResults;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;
import com.example.androidmalwareanalyzer.ui.logAnalyzer.LogResult;

import java.util.ArrayList;
import java.util.List;

public class ShowLogResult extends Fragment {
    private String date;
    private String type;
    private ArrayList<PackageInfoStruct> elements_analyzed;
    private Context mContext;
    private ArrayList<LogResult.LogInteractions> logs_result_list;

    public ShowLogResult(Context context, String analysis_type, String analysis_date, String elements, String msg) {
        mContext = context;
        type = analysis_type;
        date = analysis_date;
        LogResult result = new LogResult(msg);
        logs_result_list = result.getList();
        getInstalledApps(elements);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_show_log_result, container, false);

        final TextView textView1 = root.findViewById(R.id.log_title_results);
        textView1.setText(type);

        final TextView textView2 = root.findViewById(R.id.log_date_results);
        textView2.setText(date);

        RecyclerView elementsRecyclerView = root.findViewById(R.id.log_elements_list);
        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
        elementsRecyclerView.setLayoutManager(layoutManager);
        RecyclerView.Adapter elementsAdapter = new ElementsAdapter(getContext(), elements_analyzed);
        elementsRecyclerView.setAdapter(elementsAdapter);

        RecyclerView interactionsRecyclerView = root.findViewById(R.id.interactions_list);
        LinearLayoutManager layoutManager1 = new LinearLayoutManager(getContext());
        interactionsRecyclerView.setLayoutManager(layoutManager1);
        RecyclerView.Adapter interactionsAdapter = new LogElementsAdapter(getContext(), logs_result_list, false);
        interactionsRecyclerView.setAdapter(interactionsAdapter);

        ArrayList<LogResult.LogInteractions> suspicious_list = new ArrayList<>();
        for (int i = 0; i < logs_result_list.size(); ++i) {
            /*if (logs_result_list.get(i).getSuspicious_interactions() > 0)----------------------------------------------------------------------
                suspicious_list.add(logs_result_list.get(i));*/
        }

        RecyclerView suspiciousRecyclerView = root.findViewById(R.id.suspicious_list);
        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getContext());
        suspiciousRecyclerView.setLayoutManager(layoutManager2);
        RecyclerView.Adapter suspiciousAdapter = new LogElementsAdapter(getContext(), suspicious_list, true);
        suspiciousRecyclerView.setAdapter(suspiciousAdapter);

        /*alterar lista para chequear permisos

        RecyclerView non_permission_RecyclerView = root.findViewById(R.id.non_permission_list);
        non_permission_RecyclerView.setLayoutManager(layoutManager);
        RecyclerView.Adapter non_permission_Adapter = new ElementsAdapter(getContext(), ); //lista tras juntar result con permisos de paquetes
        non_permission_RecyclerView.setAdapter(non_permission_Adapter);

        List<String> getGrantedPermissions(final String appPackage) {
            List<String> granted = new ArrayList<String>();
            try {
                PackageInfo pi = getPackageManager().getPackageInfo(appPackage, PackageManager.GET_PERMISSIONS);
                for (int i = 0; i < pi.requestedPermissions.length; i++) {
                    if ((pi.requestedPermissionsFlags[i] & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0) {
                        granted.add(pi.requestedPermissions[i]);
                    }
                }
            } catch (Exception e) {
            }
            return granted;
        }*/

        return root;
    }

    private void getInstalledApps(String elements) {
        List<PackageInfo> packs = mContext.getPackageManager().getInstalledPackages(0);
        String[] filter_values = elements.split(",");
        boolean found;
        elements_analyzed = new ArrayList<PackageInfoStruct>();

        //Elements analyzed
        if (filter_values.length < 1 || elements.equals("")) {
            PackageInfoStruct newInfo = new PackageInfoStruct();
            newInfo.setAppName("Everything");
            newInfo.setAppIcon(null);
            elements_analyzed.add(newInfo);
        }
        else {
            for (int i = 0; i < filter_values.length; ++i) {
                found = false;
                PackageInfoStruct newInfo = new PackageInfoStruct();

                for (int j = 0; j < packs.size() && !found; ++j) {
                    PackageInfo p = packs.get(j);
                    if (filter_values[i].equals(p.packageName)) {
                        newInfo.setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
                        newInfo.setPackageName(p.packageName);
                        newInfo.setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));
                        found = true;
                    }
                }

                if (!found)
                    newInfo.setAppName(filter_values[i]);

                elements_analyzed.add(newInfo);
            }
        }

        //Elements from result
        for (int j = 0; j < packs.size(); ++j) {
            PackageInfo p = packs.get(j);
            found = false;

            for (int i = 0; i < logs_result_list.size() && !found; ++i) {
                if (logs_result_list.get(i).getElement().equals(p.packageName)) {
                    logs_result_list.get(i).setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
                    logs_result_list.get(i).setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));
                    found = true;
                }
            }
        }
    }
}
