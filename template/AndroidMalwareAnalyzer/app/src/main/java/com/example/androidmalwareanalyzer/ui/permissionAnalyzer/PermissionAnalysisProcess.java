package com.example.androidmalwareanalyzer.ui.permissionAnalyzer;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.method.ScrollingMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppDetails;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppPermissions;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppsListFragment;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.Callable;

import android.content.Context;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.TextView;


public class PermissionAnalysisProcess extends Fragment {

    private double mean_score;
    ExpandableListView expandableListView;
    ExpandableListAdapter expandableListAdapter;
    List<String> expandableListTitle;
    HashMap<String, List<AppScore>> expandableListDetail;
    MalwareDB dbHelper;

    public PermissionAnalysisProcess(HashMap<String, List<AppScore>> expandableListDetail, MalwareDB dbHelper, double mean_score){
        this.expandableListDetail = expandableListDetail;
        this.dbHelper = dbHelper;
        this.mean_score = mean_score;
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.fragment_permission_analyzer,container,false);

        TextView tv = v.findViewById(R.id.score);
        String score = Math.round(mean_score*100.0)/100.0+"";
        tv.setText(score);

        expandableListView = v.findViewById(R.id.expandableListView);
        expandableListTitle = new ArrayList<>(expandableListDetail.keySet());
        int totalinstalledApps = getTotalInstalledApps(getActivity().getPackageManager());
        expandableListAdapter = new CustomExpandableListAdapter(getContext(), expandableListTitle, expandableListDetail, totalinstalledApps);
        expandableListView.setAdapter(expandableListAdapter);

        expandableListView.setOnGroupExpandListener(groupPosition -> Toast.makeText(getActivity().getApplicationContext(),
                expandableListAdapter.getChildrenCount(groupPosition) + " apps found out of " + totalinstalledApps,
                Toast.LENGTH_SHORT).show());

        expandableListView.setOnGroupCollapseListener(groupPosition -> Toast.makeText(getActivity().getApplicationContext(),
                expandableListTitle.get(groupPosition) + " List Collapsed.",
                Toast.LENGTH_SHORT).show());

        expandableListView.setOnChildClickListener((parent, v1, groupPosition, childPosition, id) -> {
            AppScore as = (AppScore) expandableListAdapter.getChild(groupPosition, childPosition);
            AppPermissions fragment = new AppPermissions(as, dbHelper);
            FragmentManager manager = getParentFragmentManager();
            manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
            return false;
        });

        return v;
    }


    private int getTotalInstalledApps(PackageManager pm) {
        int app_count = 0;
        List<PackageInfo> packs = pm.getInstalledPackages(pm.GET_PERMISSIONS);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                ++app_count;
            }
        }
        return app_count;
    }

    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }


}