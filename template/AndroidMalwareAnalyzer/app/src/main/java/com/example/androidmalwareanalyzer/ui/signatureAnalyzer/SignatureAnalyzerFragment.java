package com.example.androidmalwareanalyzer.ui.signatureAnalyzer;

import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.prevResults.PrevResultsDB;
import com.example.androidmalwareanalyzer.ui.prevResults.ShowResult;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class SignatureAnalyzerFragment extends Fragment {
    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    private ArrayList<AppInfo> installedApps;
    private Button checkHash, SelectAll;
    private AppsManager appManager;
    private int clickCount = 0;

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_signature_analyzer, container, false);
        installedApps = new ArrayList<AppInfo>();
        mRecyclerView = (RecyclerView) root.findViewById(R.id.recycleView);
        checkHash = root.findViewById(R.id.button);
        SelectAll = root.findViewById(R.id.button2);
        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
        mRecyclerView.setLayoutManager(layoutManager);
        appManager = new AppsManager(getContext());
        installedApps = appManager.getApps();

        // Initialize a new adapter for RecyclerView
        mAdapter = new InstalledAppsAdapter(
                getContext(),
                installedApps
        );

        mRecyclerView.setAdapter(mAdapter);

        SelectAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clickCount++;
                if(clickCount % 2 != 0) {
                    for (int i = 0; i < installedApps.size(); i++)
                        installedApps.get(i).setSelected(true);
                    mAdapter.notifyDataSetChanged();
                }
                else {
                    for (int i = 0; i < installedApps.size(); i++){
                        installedApps.get(i).setSelected(false);
                    }
                    mAdapter.notifyDataSetChanged();
                }
            }
        });

        checkHash.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ArrayList<AppInfo> selectedApps = new ArrayList<AppInfo>();
                for(int i = 0; i < installedApps.size(); ++i) {
                    if (installedApps.get(i).isSelected())
                        selectedApps.add(installedApps.get(i));
                }
                ArrayList<String> data = new ArrayList<>();
                for (int i = 0; i < selectedApps.size(); ++i) {
                    data.add(selectedApps.get(i).getAppName());
                }
                //----------------------------------------
                MalwareDB dbHelper = new MalwareDB(getContext());
                SQLiteDatabase db = dbHelper.getWritableDatabase();
                if (db != null) {
                    //dbHelper.InitializeDBHashes(db);
                    //dbHelper.InitializeDBPermisses(db);
                    //dbHelper.DeleteDB();
                }
                ArrayList<String> malwareApps = new ArrayList<>();
                for (int i = 0; i < data.size(); ++i){
                    ApplicationInfo app = new ApplicationInfo();
                    try {
                        app = getContext().getPackageManager().getApplicationInfo(getPackNameByAppName(data.get(i)), 0);
                    } catch (PackageManager.NameNotFoundException e) {
                        e.printStackTrace();
                    }
                    String hash = getHashApp(app, "MD5");
                    if (dbHelper.getHash(hash) != null) {
                        malwareApps.add(data.get(i));
                    }
                }
                String strDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
                PrevResultsDB db_results = new PrevResultsDB(getContext());
                String message_returned = "";

                if (malwareApps.isEmpty())
                    message_returned = "There is no malware found";
                else
                    message_returned = "Posible Malware found in application(s):\n";
                    for (int i = 0; i < malwareApps.size(); ++i){
                        message_returned += "   " + malwareApps.get(i) + "\n";
                    }
                String filter = "";
                for(int i = 0; i < data.size(); ++i) {
                    filter += getPackNameByAppName(data.get(i)) + ",";
                }
                db_results.insertToDB("Signature analysis result", strDate, filter, message_returned);
                db_results.closeDB();
                ShowResult fragment = new ShowResult(getContext(), "Signature analysis result", strDate, filter, message_returned);
                FragmentManager manager = getParentFragmentManager();
                manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).commit();
                /*
                Intent intent = new Intent(getContext(), CheckHash.class);
                intent.putExtra("SELECTED_APPS", data);
                startActivity(intent);
                */
            }
        });
        return root;
    }

    public String getPackNameByAppName(String name) {
        PackageManager pm = getContext().getPackageManager();
        List<ApplicationInfo> l = pm.getInstalledApplications(PackageManager.GET_META_DATA);
        String packName = "";
        for (ApplicationInfo ai : l) {
            String n = (String)pm.getApplicationLabel(ai);
            if (n.contains(name) || name.contains(n)){
                packName = ai.packageName;
            }
        }
        return packName;
    }

    public String getHashApp(ApplicationInfo app, String alg) {
        //Create checksum for this file
        File file = new File(app.sourceDir);
        //Use MD5 algorithm
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(alg);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        //Get the checksum
        String checksum = null;
        try {
            checksum = getFileChecksum(md, file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return checksum;
    }

    private static String getFileChecksum(MessageDigest digest, File file) throws IOException {
        //FileInputStream para leer
        FileInputStream fis = new FileInputStream(file);
        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0;
        //Leer archivo y actualizarlo en message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };
        //Cerrar el stream
        fis.close();
        //Obtener el hash
        byte[] bytes = digest.digest();
        //Convertir el hash a hex
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }
        //Devuelve el hash
        return sb.toString();
    }
}

