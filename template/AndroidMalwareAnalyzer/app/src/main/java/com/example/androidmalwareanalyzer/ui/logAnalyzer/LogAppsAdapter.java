package com.example.androidmalwareanalyzer.ui.logAnalyzer;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class LogAppsAdapter extends RecyclerView.Adapter<LogAppsAdapter.ViewHolder> {

    private Context mContext;
    private boolean user;
    private ArrayList<PackageInfoStruct> userApps;
    private ArrayList<PackageInfoStruct> systemApps;
    private ArrayList<PackageInfoStruct> selectedApps;
    private LogAnalyzerFragmentApplications analyzer;

    public LogAppsAdapter(Context context, boolean user,  LogAnalyzerFragmentApplications analyzer_class) {
        mContext = context;
        userApps = new ArrayList<PackageInfoStruct>();
        systemApps = new ArrayList<PackageInfoStruct>();
        analyzer = analyzer_class;
        this.user = user;
        getInstalledApps();

        if (user)
            selectedApps = userApps;
        else
            selectedApps = systemApps;
    }

    public static class ViewHolder extends RecyclerView.ViewHolder {
        public TextView mTextViewLabel;
        public ImageView mImageViewIcon;
        public CheckBox mAppSelect;
        public RelativeLayout mItem;

        public ViewHolder(View v) {
            super(v);
            // Get the widgets reference from custom layout
            mTextViewLabel = (TextView) v.findViewById(R.id.Apk_Name);
            mImageViewIcon = (ImageView) v.findViewById(R.id.packageImage);
            mAppSelect = (CheckBox) v.findViewById(R.id.appSelect);
            mItem = (RelativeLayout) v.findViewById(R.id.item);
        }

    }
    @Override
    public LogAppsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(mContext).inflate(R.layout.main_line_view, parent, false);
        ViewHolder vh = new ViewHolder(v);
        return vh;
    }

    @Override
    public void onBindViewHolder(LogAppsAdapter.ViewHolder holder, final int position) {
        // Get the current app icon
        Drawable icon = selectedApps.get(position).getAppIcon();
        // Get the current app label
        String label = selectedApps.get(position).getAppName();
        // Set the current app label
        holder.mTextViewLabel.setText(label);
        // Set the current app icon
        holder.mImageViewIcon.setImageDrawable(icon);

        holder.mAppSelect.setChecked(selectedApps.get(position).isSelected());

        holder.mItem.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedApps.get(position).setSelected(!selectedApps.get(position).isSelected());
                setFilter();
                LogAppsAdapter.this.notifyDataSetChanged();
            }
        });
    }
    @Override
    public int getItemCount() {
        // Count the installed apps
        return selectedApps.size();
    }

    private void getInstalledApps() {
        List<PackageInfo> packs = mContext.getPackageManager().getInstalledPackages(0);

        for(int i = 0; i < packs.size(); ++i) {
            PackageInfo p = packs.get(i);
            PackageInfoStruct newInfo = new PackageInfoStruct();
            newInfo.setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
            newInfo.setPackageName(p.packageName);
            newInfo.setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));
            if ((p.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)
                userApps.add(newInfo);
            else
                systemApps.add(newInfo);
        }

        Collections.sort(userApps, (app2, app1) -> app2.getAppName().compareToIgnoreCase(app1.getAppName()));
        Collections.sort(systemApps, (app2, app1) -> app2.getAppName().compareToIgnoreCase(app1.getAppName()));

        String apps = "";
        for (int i = 0; i < userApps.size(); ++i) {
            apps += userApps.get(i).getPackageName() + ",";
        }
        analyzer.apps = apps;
    }

    public void setFilter() {
        String filter = "";
        for(int i = 0; i < selectedApps.size(); ++i) {
            if (selectedApps.get(i).isSelected()){
                filter += selectedApps.get(i).getPackageName() + ",";
            }
        }

        analyzer.filter = filter;
    }
}