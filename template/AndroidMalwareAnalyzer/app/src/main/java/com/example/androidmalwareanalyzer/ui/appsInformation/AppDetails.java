package com.example.androidmalwareanalyzer.ui.appsInformation;


import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.graphics.pdf.PdfDocument;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.widget.BaseAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.res.ResourcesCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.AppScore;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.PermissionAnalysisProcess;

import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class AppDetails extends Fragment {
    private PackageInfo app;
    private RelativeLayout perm_layout;
    private AppScore as;
    private MalwareDB dbHelper;
    private HashMap<String, List<String>> domain;
    private ExpandableListView domain_list;
    private DomainAdapter adapter;

    public AppDetails(PackageInfo app){
        this.app = app;
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.view_app,container,false);

        dbHelper = new MalwareDB(getContext());

        String sha = getHash(app.applicationInfo, "SHA256");
        String md5 = getHash(app.applicationInfo, "MD5");

        ImageView iv = v.findViewById(R.id.appimg);
        TextView name = v.findViewById(R.id.appname);
        TextView version = v.findViewById(R.id.app_version);

        perm_layout = v.findViewById(R.id.perm_layout);

        TextView category = v.findViewById(R.id.app_category);
        TextView pack = v.findViewById(R.id.app_package);
        TextView dir = v.findViewById(R.id.app_dir);
        TextView hash_sha = v.findViewById(R.id.app_sha256);
        TextView hash_md5 = v.findViewById(R.id.app_md5);

        name.setText(app.applicationInfo.loadLabel(getActivity().getPackageManager()));
        version.setText("Versi√≥n " + app.versionName);

        String cat = (String) app.applicationInfo.getCategoryTitle(getContext(), app.applicationInfo.category);
        if (cat == null){
            cat = "Undefined";
        }
        category.setText(cat);
        pack.setText(app.packageName);
        dir.setText(app.applicationInfo.sourceDir);
        hash_sha.setText(sha);
        hash_md5.setText(md5);
        iv.setImageDrawable(app.applicationInfo.loadIcon(getActivity().getPackageManager()));

        domain_list = v.findViewById(R.id.domain_list);
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Handler handler = new Handler(Looper.getMainLooper());
        executorService.execute(new Runnable() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void run() {
                as = dbHelper.getAppScore(new AppScore(app), app.requestedPermissions);
                executorService.shutdown();
            }
        });
        handler.post(new Runnable() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void run() {
                List<String> keys = new ArrayList<>();

                while(!executorService.isTerminated()){ }

                //Score

                TextView quality = v.findViewById(R.id.quality);
                TextView quantity = v.findViewById(R.id.quantity);
                quality.setText(as.getQuality_score()+"/10");
                quantity.setText(as.getQuantity_score()+"/10");

                //Domain
                domain = as.getDomain();
                for (String key : domain.keySet()){ keys.add(key); }
                adapter = new DomainAdapter(getActivity(), domain, keys);
                domain_list.setAdapter(adapter);

                setListViewHeight(domain_list, domain.size());

                domain_list.setOnGroupClickListener((parent, v12, groupPosition, id) -> {
                    setListViewHeight(parent, groupPosition);
                    return false;
                });

                domain_list.setOnChildClickListener((parent, v1, groupPosition, childPosition, id) -> {
                    if (childPosition != 0){
                        PermissionFragment fragment = new PermissionFragment(as, dbHelper, (String) adapter.getChild(groupPosition, childPosition));
                        FragmentManager manager = getParentFragmentManager();
                        manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
                    }
                    return true;
                });

                perm_layout.setOnClickListener(v1 -> {
                    AppPermissions fragment = new AppPermissions(as, dbHelper);
                    FragmentManager manager = getParentFragmentManager();
                    manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
                });
            }
        });

        return v;
    }


    public String getHash(ApplicationInfo app, String alg) {

        //Create checksum for this file
        File file = new File(app.sourceDir);

        //Use alg algorithm
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(alg);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        //Get the checksum
        String checksum = null;
        try {
            checksum = getFileChecksum(md, file);
        } catch (IOException e) {
            e.printStackTrace();
        }

        return checksum;
    }

    private static String getFileChecksum(MessageDigest digest, File file) throws IOException {
        //FileInputStream para leer
        FileInputStream fis = new FileInputStream(file);

        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0;

        //Leer archivo y actualizarlo en message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };

        //Cerrar el stream
        fis.close();

        //Obtener el hash
        byte[] bytes = digest.digest();

        //Convertir el hash a hex
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }

        //Devuelve el hash
        return sb.toString();
    }


    public class DomainAdapter extends BaseExpandableListAdapter{

        private HashMap<String, List<String>> domain;
        private List<String> keys;
        private Context context;

        public DomainAdapter(Context context, HashMap<String, List<String>> domain, List<String> keys) {
            this.context = context;
            this.domain = domain;
            this.keys = keys;
        }

        @Override
        public int getGroupCount() { return keys.size(); }

        @Override
        public int getChildrenCount(int groupPosition) { return domain.get(getGroup(groupPosition)).size(); }

        @Override
        public Object getGroup(int groupPosition) { return keys.get(groupPosition); }

        @Override
        public Object getChild(int groupPosition, int childPosition) { return domain.get(getGroup(groupPosition)).get(childPosition); }

        @Override
        public long getGroupId(int groupPosition) { return groupPosition; }

        @Override
        public long getChildId(int groupPosition, int childPosition) { return childPosition; }

        @Override
        public boolean hasStableIds() { return false; }

        @Override
        public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {

            if(convertView == null){
                LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                convertView = layoutInflater.inflate(R.layout.view_domains, null);
            }

            TextView tvGroup = (TextView) convertView.findViewById(R.id.tvGroup);
            String group = (String) getGroup(groupPosition);
            tvGroup.setText(dbHelper.getDomainName(group));

            ImageView imgGroup = (ImageView)convertView.findViewById(R.id.imgGroup);
            imgGroup.setImageDrawable(selectDrawable(group));
            imgGroup.setColorFilter(R.color.light_grey, PorterDuff.Mode.MULTIPLY);

            ImageView arrow = (ImageView)convertView.findViewById(R.id.arrow);

            if (isExpanded) {
                arrow.setImageResource(R.drawable.ic_baseline_expand_less_24);
            } else {
                arrow.setImageResource(R.drawable.ic_baseline_expand_more_24);
            }


            return convertView;
        }

        @Override
        public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {

            if(convertView == null) {
                LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                convertView = layoutInflater.inflate(R.layout.view_domains_item, null);
            }

            TextView tvItem = (TextView) convertView.findViewById(R.id.tvItem);
            tvItem.setText(getChild(groupPosition, childPosition)+"");

            return convertView;
        }

        @Override
        public boolean isChildSelectable(int groupPosition, int childPosition) { return true; }
    }

    public void setListViewHeight(ExpandableListView listView, int group) {
        ExpandableListAdapter listAdapter = (ExpandableListAdapter) listView.getExpandableListAdapter();
        int totalHeight = 0;
        int desiredWidth = View.MeasureSpec.makeMeasureSpec(listView.getWidth(), View.MeasureSpec.EXACTLY);
        for (int i = 0; i < listAdapter.getGroupCount(); i++) {
            View groupItem = listAdapter.getGroupView(i, false, null, listView);
            groupItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

            totalHeight += groupItem.getMeasuredHeight();

            if (((listView.isGroupExpanded(i)) && (i != group))
                    || ((!listView.isGroupExpanded(i)) && (i == group))) {
                for (int j = 0; j < listAdapter.getChildrenCount(i); j++) {
                    View listItem = listAdapter.getChildView(i, j, false, null,
                            listView);
                    listItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

                    totalHeight += listItem.getMeasuredHeight();

                }
                //Add Divider Height
                totalHeight += listView.getDividerHeight() * (listAdapter.getChildrenCount(i) - 1);
            }
        }
        //Add Divider Height
        totalHeight += listView.getDividerHeight() * (listAdapter.getGroupCount() - 1);

        ViewGroup.LayoutParams params = listView.getLayoutParams();
        int height = totalHeight
                + (listView.getDividerHeight() * (listAdapter.getGroupCount() - 1));
        if (height < 10)
            height = 200;
        params.height = height;
        listView.setLayoutParams(params);
        listView.requestLayout();
    }

    private Drawable selectDrawable(String group){
        Drawable d = null;
        switch (group){
            case "android.permission-group.STORAGE": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_folder_24, null); break;
            case "android.permission-group.APP_INFO": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_perm_device_information_24, null); break;
            case "android.permission-group.LOCATION": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_location_on_24, null); break;
            case "android.permission-group.SYSTEM_TOOLS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_app_settings_alt_24, null); break;
            case "android.permission-group.NETWORK": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_network_check_24, null); break;
            case "android.permission-group.ACCOUNTS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_manage_accounts_24, null); break;
            case "android.permission-group.PERSONAL_INFO": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_person_search_24, null); break;
            case "android.permission-group.VOICEMAIL": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_phone_in_talk_24, null); break;
            case "android.permission-group.BLUETOOTH_NETWORK": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_bluetooth_24, null); break;
            case "android.permission-group.MESSAGES": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_chat_24, null); break;
            case "android.permission-group.PHONE_CALLS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_local_phone_24, null); break;
            case "android.permission-group.CAMERA": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_camera_alt_24, null); break;
            case "android.permission-group.DEVELOPMENT_TOOLS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_developer_mode_24, null); break;
            case "android.permission-group.AFFECTS_BATTERY": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_battery_alert_24, null); break;
            case "android.permission-group.SCREENLOCK": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_screen_lock_portrait_24, null); break;
            case "android.permission-group.STATUS_BAR": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_toc_24, null); break;
            case "android.permission-group.AUDIO_SETTINGS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_volume_up_24, null); break;
            case "android.permission-group.SOCIAL_INFO": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_people_alt_24, null); break;
            case "android.permission-group.SYNC_SETTINGS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_sync_24, null); break;
            case "android.permission-group.MICROPHONE": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_mic_24, null); break;
            case "android.permission-group.DEVICE_ALARMS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_access_alarm_24, null); break;
            case "android.permission-group.WALLPAPER": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_wallpaper_24, null); break;
            case "android.permission-group.DISPLAY": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_view_quilt_24, null); break;
            case "android.permission-group.USER_DICTIONARY": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_menu_book_24, null); break;
            case "android.permission-group.WRITE_USER_DICTIONARY": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_menu_book_24, null); break;
            case "android.permission-group.BOOKMARKS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_bookmarks_24, null); break;
            case "android.permission-group.HARDWARE_CONTROLS": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_hardware_24, null); break;
            case "android.permission-group.SYSTEM_CLOCK": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_access_time_24, null); break;
        }
        return d;
    }
}