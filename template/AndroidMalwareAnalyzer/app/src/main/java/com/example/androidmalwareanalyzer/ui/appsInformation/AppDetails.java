package com.example.androidmalwareanalyzer.ui.appsInformation;


import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.os.Bundle;
import android.os.Environment;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.androidmalwareanalyzer.R;

import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class AppDetails extends AppCompatActivity {
    PackageInfo app;

    public AppDetails(){    }

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.view_app);

        getSupportActionBar().setTitle("AppDetails");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        Bundle b = getIntent().getExtras();
        app = b.getParcelable("app");

        String sha = getHash(app.applicationInfo, "SHA256");
        String md5 = getHash(app.applicationInfo, "MD5");

        ImageView iv = findViewById(R.id.appimg);
        TextView name = findViewById(R.id.appname);
        TextView version = findViewById(R.id.app_version);

        TextView pack = findViewById(R.id.app_package);
        TextView dir = findViewById(R.id.app_dir);
        TextView hash_sha = findViewById(R.id.app_sha256);
        TextView hash_md5 = findViewById(R.id.app_md5);
        TextView perm = findViewById(R.id.app_permisos);

        name.setText(app.applicationInfo.loadLabel(getPackageManager()));
        version.setText("Versi√≥n " + app.versionName);
        pack.setText("Package\n" + app.packageName);
        dir.setText("Path\n" + app.applicationInfo.sourceDir);
        hash_sha.setText("SHA256\n" + sha);
        hash_md5.setText("MD5\n" + md5);
        perm.setText("Permisos\n" + getPermissions(app));

        iv.setImageDrawable(app.applicationInfo.loadIcon(getPackageManager()));
    }

    /*
    private void writeToFile(String data) throws IOException {
        FileOutputStream fos = null;
        File path = Environment.getExternalStoragePublicDirectory(DOWNLOAD_SERVICE);
        File file = new File(path, "log.txt");

        FileOutputStream stream = new FileOutputStream(file);
        try {
            stream.write(data.getBytes());
        } finally {
            stream.close();
        }

    }
    */

    public String getPermissions(@NotNull PackageInfo app){
        String str = "";

        if (app.requestedPermissions==null){
            str = "No requiere permisos";
        }
        else{
            for (int i = 0; i < app.requestedPermissions.length; ++i){
                str += app.requestedPermissions[i] + "\n";
            }
        }

        return str;
    }

    public String getHash(ApplicationInfo app, String alg) {

        //Create checksum for this file
        File file = new File(app.sourceDir);

        //Use alg algorithm
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(alg);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        //Get the checksum
        String checksum = null;
        try {
            checksum = getFileChecksum(md, file);
        } catch (IOException e) {
            e.printStackTrace();
        }

        return checksum;
    }

    private static String getFileChecksum(MessageDigest digest, File file) throws IOException {
        //FileInputStream para leer
        FileInputStream fis = new FileInputStream(file);

        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0;

        //Leer archivo y actualizarlo en message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };

        //Cerrar el stream
        fis.close();

        //Obtener el hash
        byte[] bytes = digest.digest();

        //Convertir el hash a hex
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }

        //Devuelve el hash
        return sb.toString();
    }

}