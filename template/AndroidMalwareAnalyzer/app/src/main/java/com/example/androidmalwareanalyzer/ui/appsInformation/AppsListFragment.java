package com.example.androidmalwareanalyzer.ui.appsInformation;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.FragmentTransaction;
import androidx.loader.app.LoaderManager;

import com.example.androidmalwareanalyzer.R;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class AppsListFragment extends Fragment {

    private List<PackageInfo> installedApps, customlist = null;
    private AppAdapter installedAppAdapter;
    private String perm;
    ListView userInstalledApps;

    public AppsListFragment() {
        // Required empty public constructor
    }

    public AppsListFragment(List<PackageInfo> customlist, String perm){
        this.customlist = customlist;
        this.perm = perm;
    }

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.fragment_apps_info,container,false);

        userInstalledApps = v.findViewById(R.id.installed_app_list);

        TextView tv = v.findViewById(R.id.perm);

        if (customlist == null){
            installedApps = getInstalledApps();
            tv.setVisibility(View.GONE);
        }
        else{
            installedApps = customlist;
            tv.setVisibility(View.VISIBLE);
            tv.setText(perm);
        }

        installedAppAdapter = new AppAdapter(getActivity(), installedApps); // OJOOO
        userInstalledApps.setAdapter(installedAppAdapter);

        userInstalledApps.setOnItemClickListener((adapterView, view, i, l) -> {

            PackageInfo app = installedApps.get(i);

            PackageManager pm = getActivity().getPackageManager();
            List<PackageInfo> packs = pm.getInstalledPackages(PackageManager.GET_PERMISSIONS);

            for (int j = 0; j < packs.size(); j++) {
                PackageInfo pack = packs.get(j);
                if(pack.applicationInfo.sourceDir.equals(app.applicationInfo.sourceDir)) {
                    AppDetails fragment = new AppDetails(pack);
                    FragmentManager manager = getParentFragmentManager();
                    manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
                }
            }

        });

        //Total Number of Installed-Apps(i.e. List Size)
        String  abc = userInstalledApps.getCount()+"";
        TextView countApps = v.findViewById(R.id.countApps);
        countApps.setText("Total Installed Apps: "+abc);
        Toast.makeText(getActivity().getApplicationContext(), abc+" Apps", Toast.LENGTH_SHORT).show();

        return v;
    }

    //Return a list of the installed apps
    private List<PackageInfo> getInstalledApps() {
        PackageManager pm = getActivity().getPackageManager();
        List<PackageInfo> apps = new ArrayList<>();//return
        List<PackageInfo> packs = pm.getInstalledPackages(0);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                apps.add(p);
            }
        }

        Collections.sort(apps, (app2, app1) -> app2.applicationInfo.loadLabel(getActivity().getPackageManager()).toString().compareToIgnoreCase(app1.applicationInfo.loadLabel(getActivity().getPackageManager()).toString()));
        return apps;
    }

    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }

    public class AppAdapter extends BaseAdapter implements Filterable {

        public LayoutInflater layoutInflater;
        public List<PackageInfo> listStorage;
        public List<PackageInfo> temporarylist;

        public AppAdapter(Context context, List<PackageInfo> customizedListView) {
            layoutInflater =(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            listStorage = customizedListView;
            temporarylist = customizedListView;
        }

        @Override
        public int getCount() {
            return listStorage.size();
        }

        @Override
        public Object getItem(int position) {
            return position;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            ViewHolder listViewHolder;
            if(convertView == null){
                listViewHolder = new ViewHolder();
                convertView = layoutInflater.inflate(R.layout.installed_app_list, parent, false);

                listViewHolder.textInListView = convertView.findViewById(R.id.list_app_name);
                listViewHolder.imageInListView = convertView.findViewById(R.id.app_icon);
                listViewHolder.packageInListView=convertView.findViewById(R.id.list_app_package);

                convertView.setTag(listViewHolder);
            }else{
                listViewHolder = (ViewHolder)convertView.getTag();
            }
            listViewHolder.textInListView.setText(listStorage.get(position).applicationInfo.loadLabel(getActivity().getPackageManager()));
            listViewHolder.imageInListView.setImageDrawable(listStorage.get(position).applicationInfo.loadIcon(getActivity().getPackageManager()));
            listViewHolder.packageInListView.setText("Version " + listStorage.get(position).versionName);

            return convertView;
        }

        @Override
        public Filter getFilter() {
            Filter filter = new Filter() {

                @SuppressWarnings("unchecked")
                @Override
                protected void publishResults(CharSequence constraint, FilterResults results) {
                    temporarylist=(List<PackageInfo>)results.values;
                    notifyDataSetChanged();
                }

                @Override
                protected FilterResults performFiltering(CharSequence constraint) {
                    FilterResults results = new FilterResults();
                    List<PackageInfo> FilteredList= new ArrayList<>();
                    if (constraint == null || constraint.length() == 0) {
                        // No filter implemented we return all the list
                        results.values = listStorage;
                        results.count = listStorage.size();
                    }
                    else {
                        for (int i = 0; i < listStorage.size(); i++) {
                            PackageInfo data = listStorage.get(i);
                            if (data.applicationInfo.loadLabel(getActivity().getPackageManager()).toString().toLowerCase().contains(constraint.toString()))  {
                                FilteredList.add(data);
                            }
                        }
                        results.values = FilteredList;
                        results.count = FilteredList.size();
                    }
                    return results;
                }
            };
            return filter;
        }

        class ViewHolder{
            TextView textInListView;
            ImageView imageInListView;
            TextView packageInListView;
        }
    }
}