package com.example.androidmalwareanalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.lang.Integer;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;

public class Connect  extends AsyncTask<String, Void, String> {

    private SharedPreferences sp;
    private String ip_server;
    private int port_server;
    private InetSocketAddress address;
    private Socket socket;
    private boolean stop;
    public AsyncResponse delegate = null;
    private int background_status;

    private Context context;

    public Connect(Context mContext, AsyncResponse delegate) {
        this.context = mContext;
        this.delegate = delegate;
    }

    public interface AsyncResponse {
        void processFinish(int st, String message_returned);
    }

    public int connectToSocket() {
        int ret = loadConnections();

        if (ret >= 0) {
            address = new InetSocketAddress(ip_server, port_server);
            socket = new Socket();
            try {
                socket.connect(address);
            } catch (IOException e) {
                e.printStackTrace();
                return -4;
            }
            ret = 0;
        }

        return ret;
    }

    @Override
    protected String doInBackground(String... args) {
        String message_returned = "";

        //background_status = sendLogs(args[0]);
        background_status = 2;//-----------------------------------------
        while(!stop) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        if (background_status < 0)
            return "";

        //message_returned = receiveData();
        message_returned="asdas#";//-----------------------------------------

        if (message_returned.length() >= 1 && message_returned.substring(message_returned.length() - 1).equals("#"))
            background_status = 3;
        else
            background_status = -6;

        return message_returned;
    }

    @Override
    protected void onPostExecute(String message_returned) {
        delegate.processFinish(background_status, message_returned);
    }

    public int sendLogs(String filter) {
        String[] filter_values;
        boolean isFound;
        String line;
        int ret;

        ret = connectToSocket();
        if (ret < 0)
            return ret;

        try {
            stop = false;
            filter_values = filter.split(",");

            OutputStream ostream = socket.getOutputStream();

            while(!stop) {
                Process process = Runtime.getRuntime().exec(new String[]{"logcat", "-d"});
                Runtime.getRuntime().exec(new String[]{"logcat", "-c"});
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));

                String tmp = "";
                while ((line = bufferedReader.readLine()) != null) {
                    if (line != tmp && line.charAt(0) != '-') {
                        tmp = line;
                        line += '\n';
                        isFound = (filter_values[0] == "");

                        for (int i = 0; i < filter_values.length && !isFound; ++i)
                            isFound = isFound || line.toLowerCase().contains(filter_values[i]);

                        if (isFound)
                            ostream.write(line.getBytes());
                    }
                }

                Thread.sleep(5000);
            }
            ret = 2;
        } catch (IOException | InterruptedException e) {
            Log.e("IOExceptionTag", e.toString());
            return -5;
        }

        return ret;
    }

    public String receiveData() {
        String msg = "";
        String line;

        try {
            InputStream istream = socket.getInputStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(istream));

            while(!(line = in.readLine()).equals("end")) {
                msg += line + '\n';
            }

            socket.close();
        } catch (IOException e) {
            Log.e("IOExceptionTag", e.toString());
            msg += "#";
        }

        return msg;
    }

    public int loadConnections() {
        List<String> connectionsList = new ArrayList<String>();
        String connection;
        int selectedConnection;
        JSONArray arr;

        sp = context.getSharedPreferences("ServerConnections", Context.MODE_PRIVATE);
        String json = sp.getString("connectionsList", null);

        if (json == null)
            return -1;
        else {
            try {
                arr = new JSONArray(json);

                for (int i = 0; i < arr.length(); ++i) {
                    connection = arr.optString(i);
                    connectionsList.add(connection);
                }

                selectedConnection = sp.getInt("selectedConnection", -1);

                if (selectedConnection != -1) {
                    connection = connectionsList.get(selectedConnection);
                    String[] ip_port = connection.split(":");
                    ip_server = ip_port[0];
                    port_server = Integer.parseInt(ip_port[1]);
                }
                else
                    return -2;
            } catch (JSONException e) {
                e.printStackTrace();
                return -3;
            }
            return 0;
        }
    }

    public boolean getStop() { return stop; }
    public void setStop(boolean st) { stop = st; }
}

