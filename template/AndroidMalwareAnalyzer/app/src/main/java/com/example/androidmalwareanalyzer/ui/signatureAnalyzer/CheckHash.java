package com.example.androidmalwareanalyzer.ui.signatureAnalyzer;

import android.app.Activity;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;


public class CheckHash extends Activity {
    private ArrayList<AppInfo> selected;
    private AppsManager appManager;

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.checkhash);
        RecyclerView mRecyclerView = (RecyclerView) findViewById(R.id.recycleViewer);
        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        mRecyclerView.setLayoutManager(layoutManager);
        appManager = new AppsManager(this);

        ArrayList<String> list = getIntent().getStringArrayListExtra("SELECTED_APPS");
        selected = appManager.getSelectedApps(list);

        // Initialize a new adapter for RecyclerView
        SelectedAppsAdapter mAdapter = new SelectedAppsAdapter(
                this,
                selected
        );
        mRecyclerView.setAdapter(mAdapter);

        MalwareDB dbHelper = new MalwareDB(this);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        if (db != null) {
            //dbHelper.InitializeDBHashes(db);
        }
        ArrayList<String> malwareApps = new ArrayList<>();
        for (int i = 0; i < list.size(); ++i){
            ApplicationInfo app = new ApplicationInfo();
            try {
                app = this.getPackageManager().getApplicationInfo(getPackNameByAppName(list.get(i)), 0);
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
            String hash = getHashApp(app, "MD5");
            if (dbHelper.getHash(hash) != null) {
                malwareApps.add(list.get(i));
            }
        }
        if (malwareApps.isEmpty())
            Toast.makeText(getApplicationContext(), "There is no malware found\n", Toast.LENGTH_LONG).show();
        else
            Toast.makeText(getApplicationContext(), "Posible Malware found in application: \n" + malwareApps, Toast.LENGTH_LONG).show();

    }

    public String getPackNameByAppName(String name) {
        PackageManager pm = this.getPackageManager();
        List<ApplicationInfo> l = pm.getInstalledApplications(PackageManager.GET_META_DATA);
        String packName = "";
        for (ApplicationInfo ai : l) {
            String n = (String)pm.getApplicationLabel(ai);
            if (n.contains(name) || name.contains(n)){
                packName = ai.packageName;
            }
        }
        return packName;
    }

    public String getHashApp(ApplicationInfo app, String alg) {
        //Create checksum for this file
        File file = new File(app.sourceDir);
        //Use MD5 algorithm
        MessageDigest md = null;

        try {
            md = MessageDigest.getInstance(alg);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        //Get the checksum
        String checksum = null;
        try {
            checksum = getFileChecksum(md, file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return checksum;
    }

    private static String getFileChecksum(MessageDigest digest, File file) throws IOException {
        //FileInputStream para leer
        FileInputStream fis = new FileInputStream(file);
        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0;
        //Leer archivo y actualizarlo en message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };
        //Cerrar el stream
        fis.close();
        //Obtener el hash
        byte[] bytes = digest.digest();
        //Convertir el hash a hex
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }
        //Devuelve el hash
        return sb.toString();
    }

}
