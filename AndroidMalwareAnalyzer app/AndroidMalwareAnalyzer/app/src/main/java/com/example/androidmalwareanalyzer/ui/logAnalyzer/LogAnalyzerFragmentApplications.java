package com.example.androidmalwareanalyzer.ui.logAnalyzer;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.appsInformation.PermissionFragment;
import com.example.androidmalwareanalyzer.ui.prevResults.PrevResultsDB;
import com.example.androidmalwareanalyzer.ui.prevResults.ShowLogResult;
import com.example.androidmalwareanalyzer.ui.prevResults.ShowResult;
import com.google.android.material.snackbar.Snackbar;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class LogAnalyzerFragmentApplications extends Fragment {
    private boolean applications;
    private int status;
    private LogAnalyzerConnect connect;
    private ViewGroup container_view;
    private EditText input_filter;
    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    String apps = "";
    String filter = "";
    private String analyzed_filter = "";
    private String analyzed_filter_keywords = "";

    public LogAnalyzerFragmentApplications(boolean applications_or_functionalities) { applications =  applications_or_functionalities; }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        container_view = container;

        View root = inflater.inflate(R.layout.fragment_log_analyzer_applications, container, false);

        input_filter = root.findViewById(R.id.text_filter);

        mRecyclerView = root.findViewById(R.id.appsRecycleView);
        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
        mRecyclerView.setLayoutManager(layoutManager);

        mAdapter = new LogAppsAdapter(getContext(), applications,this);

        mRecyclerView.setAdapter(mAdapter);

        connect = new LogAnalyzerConnect(getContext(), null);

        status = connect.loadConnections();
        printInfo();

        Button analysis = root.findViewById(R.id.button_scan);
        analysis.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (analysis.getText().equals("Start analysis")) {
                    if (status >= 0) {
                        analyzed_filter_keywords = input_filter.getText().toString();
                        if (analyzed_filter_keywords.length() != 0 && !analyzed_filter_keywords.endsWith(","))
                            analyzed_filter_keywords += ",";

                        analyzed_filter = filter;

                        if (!applications)
                            apps += analyzed_filter;

                        connect = (LogAnalyzerConnect) new LogAnalyzerConnect(getContext(), new LogAnalyzerConnect.AsyncResponse() {
                            @Override
                            public void processFinish(int st, String message_returned) {
                                status = st;
                                printInfo();

                                if (status >= 0) {
                                    if (!message_returned.equals("")) {
                                        String strDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                                        LogResult res = new LogResult(message_returned);
                                        message_returned = res.returnResult();

                                        PrevResultsDB db = new PrevResultsDB(getContext());
                                        db.insertToDB("Log analysis result", strDate, analyzed_filter_keywords + analyzed_filter, message_returned);
                                        db.closeDB();

                                        ShowLogResult fragment = new ShowLogResult(getContext(), "Log analysis result", strDate, analyzed_filter_keywords + analyzed_filter, message_returned);
                                        FragmentManager manager = getParentFragmentManager();
                                        manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
                                    }
                                } else {
                                    analysis.setText("Start analysis");
                                }
                            }
                        }).execute(analyzed_filter, analyzed_filter_keywords, apps);

                        analysis.setText("Stop analysis");

                        status = 1;
                    }
                }
                else {
                    connect.setStop(true);
                    analysis.setText("Start analysis");

                    status = 2;
                }

                printInfo();
            }
        });

        return root;
    }

    private void printInfo() {
        String msg = "";

        switch(status) {
            case 0:
                msg = "Select the applications to monitor.";
                break;
            case 1:
                msg = "Log monitoring started.";
                break;
            case 2:
                msg = "Log monitoring finished. Receiving results...";
                break;
            case 3:
                msg = "Data received.";
                break;
            case -1:
                msg = "No connections saved. Add a new connection in Server Settings.";
                break;
            case -2:
                msg = "No connections selected. Select a connection in Server Settings.";
                break;
            case -3:
                msg = "Unable to load the connections. Delete and create new ones in Server Settings.";
                break;
            case -4:
                msg = "Unable to connect to the socket. Check the connection in Server Settings.";
                break;
            case -5:
                msg = "Error produced while sending logs to the server.";
                break;
            case -6:
                msg = "Error produced while receiving logs from the server.";
                break;
            default:
        }

        Snackbar.make(container_view, msg, Snackbar.LENGTH_LONG)
                .setAction("Action", null).show();
    }
}