package com.example.androidmalwareanalyzer.ui.appsInformation;

import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.content.res.ResourcesCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.AppScore;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.ExpandableListDataPump;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class PermissionFragment extends Fragment {
    private AppScore as;
    private MalwareDB dbHelper;
    private PermissionInformation perm;
    private String forb_desc = "Permissions classified as Forbidden, are also known as Special Permissions and must not be used by third-party applications. Special permissions correspond to particular app operations. " +
            "Only the platform and OEMs can define special permissions. If this app is a Non-system App, then it may have some bad intentions undercovered. Be careful!";
    private String dang_desc = "Dangerous permissions, also known as dangerous permissions, give your app additional access to restricted data, and they allow your app to perform restricted actions that more substantially affect the system and other apps.\n" +
            "Therefore, the app needs to request runtime permissions before it can access your restricted data or perform restricted actions. " +
            "When an app requests a runtime permission, the system presents a runtime permission prompt asking for your consent. Watch if you have allowed it!\n" +
            "Many runtime permissions access private user data, a special type of restricted data that includes potentially sensitive information. Examples of private user data include location and contact information.";
    private String depr_desc = "Deprecated Permissions are obsolete permissions whose constant was deprecated in a former API. They should not be used by Android developers because they will be removed in the future and wont be supported by the system anymore.";
    private String sign_desc = "If the app declares a Signature permission that another app has defined, and if the two apps are signed by the same certificate, then the system grants the permission to the first app at install time. Otherwise, that first app cannot be granted the permission.";
    private String norm_desc = "Permissions classified as Normal, generally allow access to data and actions that extend beyond your app's sandbox. However, the data and actions present very little risk to the user's privacy, and the operation of other apps.";
    private String unk_desc = "This permission is unknown. It is not found in our dataset so we cannot provide you any information about it. It may have bad intentions undercovered. Be careful!";

    public static class PermissionInformation{
        private String perm_id, perm_name, perm_score, score_desc, perm_desc;
        private String domain_id, domain_name, domain_desc;
        private int score;

        public PermissionInformation(){        }

        public String getPerm_id() { return perm_id; }
        public String getPerm_name() { return perm_name; }
        public String getPerm_score() { return perm_score; }
        public String getScore_desc() { return score_desc; }
        public String getPerm_desc() { return perm_desc; }
        public String getDomain_id() { return domain_id; }
        public String getDomain_name() { return domain_name; }
        public String getDomain_desc() { return domain_desc; }
        public int getScore() { return score; }

        public void setPerm_id(String perm_id) { this.perm_id = perm_id; }
        public void setPerm_name(String perm_name) { this.perm_name = perm_name; }
        public void setPerm_score(String perm_score) { this.perm_score = perm_score; }
        public void setScore_desc(String score_desc) { this.score_desc = score_desc; }
        public void setPerm_desc(String perm_desc) { this.perm_desc = perm_desc; }
        public void setDomain_id(String domain_id) { this.domain_id = domain_id; }
        public void setDomain_name(String domain_name) { this.domain_name = domain_name; }
        public void setDomain_desc(String domain_desc) { this.domain_desc = domain_desc; }
        public void setScore(int score){ this.score = score; }
    }

    public PermissionFragment(AppScore as, MalwareDB dbHelper, String perm_name){
        this.as = as;
        this.dbHelper = dbHelper;
        this.perm = dbHelper.getPermission(perm_name);
    }

    public PermissionFragment(){    }

    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.fragment_permission, container, false);

        ImageView iv = v.findViewById(R.id.draw_perm);
        iv.setImageDrawable(selectDrawable(perm.getScore()));
        TextView perm_alias = v.findViewById(R.id.perm_alias);
        perm_alias.setText(perm.getPerm_name());
        TextView perm_id = v.findViewById(R.id.perm_id);
        perm_id.setText(perm.getPerm_id());

        setScoreString(perm.getScore());

        TextView perm_score = v.findViewById(R.id.perm_score);
        perm_score.setText(perm.getPerm_score());
        TextView class_desc = v.findViewById(R.id.class_desc);
        class_desc.setText(perm.getScore_desc());

        TextView perm_desc = v.findViewById(R.id.perm_desc);
        perm_desc.setText(perm.getPerm_desc());

        TextView domain_name = v.findViewById(R.id.domain_name);
        domain_name.setText(perm.getDomain_name());
        TextView domain_id = v.findViewById(R.id.domain_id);
        domain_id.setText(perm.getDomain_id());
        TextView domain_desc = v.findViewById(R.id.domain_desc);
        domain_desc.setText(perm.getDomain_desc());

        Button apps = v.findViewById(R.id.apps);
        apps.setOnClickListener(v1 -> {
            AppsListFragment fragment = new AppsListFragment(getInstalledApps(perm.getPerm_id()), perm.getPerm_id());
            FragmentManager manager = getParentFragmentManager();
            manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
        });

        return v;
    }

    private Drawable selectDrawable(int group){
        Drawable d = null;
        switch (group){
            case 6: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_dangerous_24, null); break;
            case 4: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_gpp_bad_24, null); break;
            case 5: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_report_problem_24, null); break;
            case 2: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_supervised_user_circle_24, null); break;
            case 1: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_info_24, null); break;
            case 0: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_device_unknown_24, null);
        }
        return d;
    }

    private void setScoreString(int score){
        switch (score){
            case 6:
                perm.setPerm_score("Forbidden");
                perm.setScore_desc(forb_desc);
            break;
            case 4:
                perm.setPerm_score("Dangerous");
                perm.setScore_desc(dang_desc);
            break;
            case 5:
                perm.setPerm_score("Deprecated");
                perm.setScore_desc(depr_desc);
                break;
            case 2:
                perm.setPerm_score("Signature");
                perm.setScore_desc(sign_desc);
            break;
            case 1:
                perm.setPerm_score("Normal");
                perm.setScore_desc(norm_desc);
            break;
            case 0:
            default:
                perm.setPerm_score("Unknown");
                perm.setScore_desc(unk_desc);
        }
    }

    private List<PackageInfo> getInstalledApps(String perm) {
        PackageManager pm = getActivity().getPackageManager();
        List<PackageInfo> apps = new ArrayList<>();//return
        List<PackageInfo> packs = pm.getInstalledPackages(pm.GET_PERMISSIONS);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                List<String> list = Arrays.asList(p.requestedPermissions);
                if(list.contains(perm)){
                    apps.add(p);
                }
            }
        }

        Collections.sort(apps, (app2, app1) -> app2.applicationInfo.loadLabel(getActivity().getPackageManager()).toString().compareToIgnoreCase(app1.applicationInfo.loadLabel(getActivity().getPackageManager()).toString()));
        return apps;
    }

    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }

}
