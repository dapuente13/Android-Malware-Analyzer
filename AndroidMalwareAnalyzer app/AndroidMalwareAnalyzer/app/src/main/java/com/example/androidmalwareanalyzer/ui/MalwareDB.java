package com.example.androidmalwareanalyzer.ui;

import android.content.ContentValues;
import android.content.Context;
import android.content.pm.PermissionInfo;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Build;
import android.util.Log;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;

import com.example.androidmalwareanalyzer.ui.appsInformation.PermissionFragment;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.AppScore;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.PermissionAnalyzerFragment;

import org.jetbrains.annotations.NotNull;

public class MalwareDB extends SQLiteOpenHelper {
    private Context context;
    private static final String DATABASE_NAME = "MalwareAnalyzer.db";
    private static final int DATABASE_VERSION = 1;

    private static final String TABLE_NAME_HASH = "Malware_list";
    private static final String COLUMN_ID = "_id";
    private static final String COLUMN_HASH = "hash";

    private static final String TABLE_NAME_PERMITS = "Permissions";
    private static final String COLUMN_ID_PERMIT = "_id";
    private static final String ID_PERMITS = "idperm";
    private static final String ALIAS = "alias";
    private static final String PERM_GROUP = "grp";
    private static final String SCORE = "score";
    private static final String COLUMN_DESCRIPTION_PERMITS = "des";

    private static final String TABLE_NAME_DOMAINS = "Domain_Permissions";
    private static final String DOMAIN_GROUP = "d_grp";
    private static final String DOMAIN_NAME = "groupname";
    private static final String DOMAIN_DESC = "groupdesc";



    public MalwareDB(@Nullable Context context) {
        super(context, DATABASE_NAME,null, DATABASE_VERSION);
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        String hash = "CREATE TABLE " + TABLE_NAME_HASH +
                " (" + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_HASH + " TEXT NOT NULL UNIQUE);";

        String permissions = "CREATE TABLE " + TABLE_NAME_PERMITS +
                " (" + COLUMN_ID_PERMIT + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                + ID_PERMITS + " TEXT NOT NULL UNIQUE, " + ALIAS + " TEXT, " + PERM_GROUP + " TEXT, " + SCORE + " INTEGER, " +
                COLUMN_DESCRIPTION_PERMITS + " TEXT);";

        String domains = "CREATE TABLE " + TABLE_NAME_DOMAINS +
                " (" + COLUMN_ID_PERMIT + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                + DOMAIN_GROUP + " TEXT NOT NULL UNIQUE, " + DOMAIN_NAME + " TEXT, " + DOMAIN_DESC + " TEXT);";

        db.execSQL(hash);
        db.execSQL(permissions);
        db.execSQL(domains);
    }

    public void DeleteDB() {
        context.deleteDatabase(DATABASE_NAME);
    }

    public boolean checkEmpty(SQLiteDatabase db, String tabla){
        return DatabaseUtils.queryNumEntries(db, tabla) == 0;
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_HASH);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_PERMITS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_DOMAINS);
        onCreate(db);
    }

    public String getFirstHash() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + COLUMN_HASH +
                " FROM " + TABLE_NAME_HASH;
        String result = null;
        Cursor cursor = db.rawQuery(query, null);
        if(cursor != null && cursor.moveToFirst() ) {
            result = cursor.getString(0);
            cursor.close();
        }
        //db.close();
        return result;
    }

    public String getHash(String hashapp) {
        //hashapp = "6ffa35b0a2acd5565ade6d3e1af64a94";
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + COLUMN_HASH +
                " FROM " + TABLE_NAME_HASH + " WHERE " +
                COLUMN_HASH + " = ?";
        String result = null;
        String[] selectionArgs = {hashapp};
        Cursor cursor = db.rawQuery(query, selectionArgs);
        if( cursor != null && cursor.moveToFirst() ) {
            result = cursor.getString(0);
            cursor.close();
        }
        //db.close();
        return result;
    }

    public PermissionFragment.PermissionInformation getPermission(String android_permission){

        PermissionFragment.PermissionInformation perm = new PermissionFragment.PermissionInformation();

        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + TABLE_NAME_PERMITS+"."+ ALIAS + ", " + TABLE_NAME_PERMITS+"."+SCORE + ", " + TABLE_NAME_PERMITS +"."+ COLUMN_DESCRIPTION_PERMITS +
                ", " + TABLE_NAME_DOMAINS +"."+DOMAIN_GROUP +  ", " + TABLE_NAME_DOMAINS +"."+DOMAIN_NAME + ", " + TABLE_NAME_DOMAINS +"."+ DOMAIN_DESC +
                " FROM " + TABLE_NAME_PERMITS + " JOIN " + TABLE_NAME_DOMAINS +
                " ON " + PERM_GROUP + " = " + DOMAIN_GROUP +
                " WHERE " + ID_PERMITS + " = '" + android_permission +"'";
        Cursor cursor = db.rawQuery(query, null);
        if( cursor != null && cursor.moveToFirst() ) {
            perm.setPerm_id(android_permission);
            perm.setPerm_name(cursor.getString(0));
            perm.setScore(cursor.getInt(1));
            perm.setPerm_desc(cursor.getString(2));
            perm.setDomain_id(cursor.getString(3));
            perm.setDomain_name(cursor.getString(4));
            perm.setDomain_desc(cursor.getString(5));
            cursor.close();
        }

        db.close();
        return perm;
    }

    public int getScore(String android_permission) {
        int result = 0;
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + SCORE + " FROM " +
                TABLE_NAME_PERMITS + " WHERE " + ID_PERMITS +
                " = '" + android_permission +"'";
        Cursor cursor = db.rawQuery(query, null);
        if( cursor != null && cursor.moveToFirst() ) {
            result = cursor.getInt(0);
            cursor.close();
        }
        //db.close();
        return result;
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public AppScore getAppScore(AppScore as, @NotNull String[] perm) {
        SQLiteDatabase db = this.getReadableDatabase();

        int score;
        String group;

        for (int i = 0; i< perm.length; ++i){
            String query = "SELECT " + TABLE_NAME_PERMITS+"."+SCORE + ", " + TABLE_NAME_PERMITS +"."+PERM_GROUP + ", " + TABLE_NAME_DOMAINS +"."+DOMAIN_DESC +
                    " FROM " + TABLE_NAME_PERMITS + " JOIN " + TABLE_NAME_DOMAINS +
                    " ON " + PERM_GROUP + " = " + DOMAIN_GROUP +
                    " WHERE " + ID_PERMITS + " = '" + perm[i] +"' AND " + PERM_GROUP + " <> 'ungrouped'";
            Cursor cursor = db.rawQuery(query, null);
            if( cursor != null && cursor.moveToFirst() ) {
                score = cursor.getInt(0);
                switch (score){
                    case 1: as.setNorm(perm[i]);
                        break;
                    case 2: as.setSig(perm[i]);
                        break;
                    case 4: as.setDangerous(perm[i]);
                        break;
                    case 5: as.setDeprec(perm[i]);
                        break;
                    case 6: as.setProhib(perm[i]);
                        break;
                    default: as.setUnk(perm[i]);
                }

                as.setDomain(cursor.getString(1), perm[i], cursor.getString(2));
                cursor.close();
            }
            else{
                as.setUnk(perm[i]);
            }

        }

        as.computeQualityScore();
        as.computeQuantityScore();
        //db.close();
        return as;
    }

    public String getDomainName(String domain) {
        String result = "Storage";
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT " + DOMAIN_NAME + " FROM " +
                TABLE_NAME_DOMAINS + " WHERE " + DOMAIN_GROUP +
                " = '" + domain +"'";
        Cursor cursor = db.rawQuery(query, null);
        if( cursor != null && cursor.moveToFirst() ) {
            result = cursor.getString(0);
            cursor.close();
        }
        db.close();
        return result;
    }


    public void addNewHash(String hash){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();

        cv.put(COLUMN_HASH, hash);
        long result = db.insert(TABLE_NAME_HASH,null, cv);
        if(result == -1)
            Toast.makeText(context, "Failed while adding a new hash!", Toast.LENGTH_SHORT).show();
        else
            Toast.makeText(context, "Added Successfully!", Toast.LENGTH_SHORT).show();
    }

    public void InitializeDBHashes(SQLiteDatabase db) {
        db = this.getWritableDatabase();
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('6ffa35b0a2acd5565ade6d3e1af64a94')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('12b5cc085c974ac955c37b1f84dda8ce')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('e9b2d68cd1de41c6278776f2d1249676')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('1c2a2d1853aafec963e5a62264f68134')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('11b8e669e71e956c138324272200e099')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('28ddb9b5b14fcca82c4b53af8ba0e03c')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('89dfd0590058f9021aac24e69a3132fe')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('5080cd5a0a56c99022a3fdfde6107f6b')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('e55afb50e57b8354102e37485bef0532')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('186b448e1ab099d6634c1c803b5d7286')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('e9870a5923a6465f1de82913057d067d')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('f60b8dd2d224bb692c14d0d8fcf933c4')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('a9fbfc4f3e537829bcb96289ab61273d')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('cab323903d20e7b9d6cd2142c7baf595')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('5d2296744d39432ccac99d9f3316c425')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('82cc3f74ed4594c393a3c882f6c31a64')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('33218d2de728bd921850b0bcf7056e1e')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('79334478d4b5bc02055fda4dd73103b4')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('5e6d8388380328018701d06e291bb87a')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('a91a8a79a2d27d5721c270f558845745')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('9ed860447ffe38b209f8d6d9f1285074')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('86167601bdaaa491d3234889ad7cdf50')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('f6a5305817221c662a7ec6ade077bd6e')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('1de8178ca6cad5ad4f61f80cfc53cb76')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('8a5752aa5c7399d3d2fff76d892ab160')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('d8dfb1e86df4f17f4bf88cb0fecb4dbe')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('2ce7bd76dfe2e81d612990833f44ffd2')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('9203dbf17b4db01cfa314e0699d4a3cf')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('01c092ad12f442794e98fb41c05ef0fc')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('d7bedbe0971547f5ee242fb51f56c4fb')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('fdf6ea8b4a7e9904ec23bed66d6fde8d')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('34986c0c444c6f8275084c628791a9f3')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('bd92330c005fb5a03210947888131cdb')"));
        db.execSQL(String.format("INSERT INTO Malware_list (hash) VALUES ('7c710b7b2c15a291138d4c1bc23e3414')"));
    }

    public void InitializeDBPermissions(SQLiteDatabase db) {
        db = this.getWritableDatabase();
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCEPT_HANDOVER', 'ACCEPT_HANDOVER', 'ungrouped', 4, 'Allows a calling app to continue a call which was started in another app. An example is a video calling app that wants to continue a voice call on the users mobile network.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_BACKGROUND_LOCATION', 'ACCESS_BACKGROUND_LOCATION', 'ungrouped', 4, 'Allows an app to access location in the background. Requesting this permission by itself doesnt give you location access.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_CHECKIN_PROPERTIES', 'ACCESS_CHECKIN_PROPERTIES', 'ungrouped', 6, 'Allows read/write access to the \"properties\" table in the checkin database, to change values that get uploaded.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_COARSE_LOCATION', 'ACCESS_COARSE_LOCATION', 'android.permission-group.LOCATION', 4, 'Allows an app to access approximate location.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_FINE_LOCATION', 'ACCESS_FINE_LOCATION', 'android.permission-group.LOCATION', 4, 'Allows an app to access precise location.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_LOCATION_EXTRA_COMMANDS', 'ACCESS_LOCATION_EXTRA_COMMANDS', 'android.permission-group.SYSTEM_TOOLS', 1, 'Allows an application to access extra location provider commands.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_MEDIA_LOCATION', 'ACCESS_MEDIA_LOCATION', 'ungrouped', 4, 'Allows an application to access any geographic locations persisted in the users shared collection.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_NETWORK_STATE', 'ACCESS_NETWORK_STATE', 'android.permission-group.NETWORK', 1, 'Allows applications to access information about networks.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_NOTIFICATION_POLICY', 'ACCESS_NOTIFICATION_POLICY', 'ungrouped', 1, 'Marker permission for applications that wish to access notification policy.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_WIFI_STATE', 'ACCESS_WIFI_STATE', 'android.permission-group.NETWORK', 1, 'Allows applications to access information about Wi-Fi networks.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCOUNT_MANAGER', 'ACCOUNT_MANAGER', 'android.permission-group.ACCOUNTS', 6, 'Allows applications to call into AccountAuthenticators.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACTIVITY_RECOGNITION', 'ACTIVITY_RECOGNITION', 'android.permission-group.PERSONAL_INFO', 4, 'Allows an application to recognize physical activity.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.voicemail.permission.ADD_VOICEMAIL', 'ADD_VOICEMAIL', 'android.permission-group.VOICEMAIL', 4, 'Allows an application to add voicemails into the system.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ANSWER_PHONE_CALLS', 'ANSWER_PHONE_CALLS', 'ungrouped', 4, 'Allows the app to answer an incoming phone call.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BATTERY_STATS', 'BATTERY_STATS', 'android.permission-group.SYSTEM_TOOLS', 2, 'Allows an application to collect battery statistics')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_ACCESSIBILITY_SERVICE', 'BIND_ACCESSIBILITY_SERVICE', 'ungrouped', 2, 'Must be required by an AccessibilityService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_APPWIDGET', 'BIND_APPWIDGET', 'android.permission-group.PERSONAL_INFO', 6, 'Allows an application to tell the AppWidget service which application can access AppWidgets data.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_AUTOFILL_SERVICE', 'BIND_AUTOFILL_SERVICE', 'ungrouped', 2, 'Must be required by a AutofillService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CALL_REDIRECTION_SERVICE', 'BIND_CALL_REDIRECTION_SERVICE', 'ungrouped', 5, 'Must be required by a CallRedirectionService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'ungrouped', 2, 'A subclass of CarrierMessagingClientService must be protected with this permission.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CARRIER_MESSAGING_SERVICE', 'BIND_CARRIER_MESSAGING_SERVICE', 'ungrouped', 5, 'This constant was deprecated in API level 23. BIND_CARRIER_SERVICES should be used instead')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CARRIER_SERVICES', 'BIND_CARRIER_SERVICES', 'ungrouped', 2, 'The system process that is allowed to bind to services in carrier apps will have this permission. Carrier apps should use this permission to protect their services that only the system is allowed to bind to.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CHOOSER_TARGET_SERVICE', 'BIND_CHOOSER_TARGET_SERVICE', 'ungrouped', 5, 'This constant was deprecated in API level 30.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_COMPANION_DEVICE_SERVICE', 'BIND_COMPANION_DEVICE_SERVICE', 'ungrouped', 0, 'Must be required by any CompanionDeviceServices to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CONDITION_PROVIDER_SERVICE', 'BIND_CONDITION_PROVIDER_SERVICE', 'ungrouped', 2, 'Must be required by a ConditionProviderService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CONTROLS', 'BIND_CONTROLS', 'ungrouped', 6, 'Allows SystemUI to request third party controls.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_DEVICE_ADMIN', 'BIND_DEVICE_ADMIN', 'ungrouped', 2, 'Must be required by device administration receiver, to ensure that only the system can interact with it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_DREAM_SERVICE', 'BIND_DREAM_SERVICE', 'ungrouped', 2, 'Must be required by an DreamService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_INCALL_SERVICE', 'BIND_INCALL_SERVICE', 'ungrouped', 2, 'Must be required by a InCallService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_INPUT_METHOD', 'BIND_INPUT_METHOD', 'ungrouped', 2, 'Must be required by an InputMethodService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_MIDI_DEVICE_SERVICE', 'BIND_MIDI_DEVICE_SERVICE', 'ungrouped', 2, 'Must be required by an MidiDeviceService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_NFC_SERVICE', 'BIND_NFC_SERVICE', 'ungrouped', 2, 'Must be required by a HostApduService or OffHostApduService to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_NOTIFICATION_LISTENER_SERVICE', 'BIND_NOTIFICATION_LISTENER_SERVICE', 'ungrouped', 2, 'Must be required by an NotificationListenerService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_PRINT_SERVICE', 'BIND_PRINT_SERVICE', 'ungrouped', 2, 'Must be required by a PrintService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_QUICK_ACCESS_WALLET_SERVICE', 'BIND_QUICK_ACCESS_WALLET_SERVICE', 'ungrouped', 2, 'Must be required by a QuickAccessWalletService to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_QUICK_SETTINGS_TILE', 'BIND_QUICK_SETTINGS_TILE', 'ungrouped', 6, 'Allows an application to bind to third party quick settings tiles.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_REMOTEVIEWS', 'BIND_REMOTEVIEWS', 'ungrouped', 2, 'Must be required by a RemoteViewsService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_SCREENING_SERVICE', 'BIND_SCREENING_SERVICE', 'ungrouped', 2, 'Must be required by a CallScreeningService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_TELECOM_CONNECTION_SERVICE', 'BIND_TELECOM_CONNECTION_SERVICE', 'ungrouped', 2, 'Must be required by a ConnectionService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_TEXT_SERVICE', 'BIND_TEXT_SERVICE', 'ungrouped', 2, 'Must be required by a TextService (e.g. SpellCheckerService) to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_TV_INPUT', 'BIND_TV_INPUT', 'ungrouped', 2, 'Must be required by a TvInputService to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_VISUAL_VOICEMAIL_SERVICE', 'BIND_VISUAL_VOICEMAIL_SERVICE', 'ungrouped', 2, 'Must be required by a link VisualVoicemailService to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_VOICE_INTERACTION', 'BIND_VOICE_INTERACTION', 'ungrouped', 2, 'Must be required by a VoiceInteractionService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_VPN_SERVICE', 'BIND_VPN_SERVICE', 'ungrouped', 2, 'Must be required by a VpnService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_VR_LISTENER_SERVICE', 'BIND_VR_LISTENER_SERVICE', 'ungrouped', 2, 'Must be required by an VrListenerService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_WALLPAPER', 'BIND_WALLPAPER', 'ungrouped', 2, 'Must be required by a WallpaperService, to ensure that only the system can bind to it.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BLUETOOTH', 'BLUETOOTH', 'android.permission-group.BLUETOOTH_NETWORK', 1, 'Allows applications to connect to paired bluetooth devices.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BLUETOOTH_ADMIN', 'BLUETOOTH_ADMIN', 'android.permission-group.BLUETOOTH_NETWORK', 1, 'Allows applications to discover and pair bluetooth devices.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BLUETOOTH_PRIVILEGED', 'BLUETOOTH_PRIVILEGED', 'android.permission-group.BLUETOOTH_NETWORK', 6, 'Allows applications to pair bluetooth devices without user interaction, and to allow or disallow phonebook access or message access.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BODY_SENSORS', 'BODY_SENSORS', 'ungrouped', 4, 'Allows an application to access data from sensors that the user uses to measure what is happening inside their body, such as heart rate.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BROADCAST_PACKAGE_REMOVED', 'BROADCAST_PACKAGE_REMOVED', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows an application to broadcast a notification that an application package has been removed.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BROADCAST_SMS', 'BROADCAST_SMS', 'android.permission-group.MESSAGES', 6, 'Allows an application to broadcast an SMS receipt notification.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BROADCAST_STICKY', 'BROADCAST_STICKY', 'android.permission-group.SYSTEM_TOOLS', 1, 'Allows an application to broadcast sticky intents.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BROADCAST_WAP_PUSH', 'BROADCAST_WAP_PUSH', 'android.permission-group.MESSAGES', 6, 'Allows an application to broadcast a WAP PUSH receipt notification.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CALL_COMPANION_APP', 'CALL_COMPANION_APP', 'ungrouped', 1, 'Allows an app which implements the InCallService API to be eligible to be enabled as a calling companion app.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CALL_PHONE', 'CALL_PHONE', 'android.permission-group.PHONE_CALLS', 4, 'Allows an application to initiate a phone call without going through the Dialer user interface for the user to confirm the call.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CALL_PRIVILEGED', 'CALL_PRIVILEGED', 'ungrouped', 6, 'Allows an application to call any phone number, including emergency numbers, without going through the Dialer user interface for the user to confirm the call being placed.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CAMERA', 'CAMERA', 'android.permission-group.CAMERA', 4, 'Required to be able to access the camera device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CAPTURE_AUDIO_OUTPUT', 'CAPTURE_AUDIO_OUTPUT', 'ungrouped', 6, 'Allows an application to capture audio output.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_COMPONENT_ENABLED_STATE', 'CHANGE_COMPONENT_ENABLED_STATE', 'ungrouped', 6, 'Allows an application to change whether an application component (other than its own) is enabled or not.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_CONFIGURATION', 'CHANGE_CONFIGURATION', 'android.permission-group.DEVELOPMENT_TOOLS', 2, 'Allows an application to modify the current configuration, such as locale.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_NETWORK_STATE', 'CHANGE_NETWORK_STATE', 'android.permission-group.NETWORK', 1, 'Allows applications to change network connectivity state.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_WIFI_MULTICAST_STATE', 'CHANGE_WIFI_MULTICAST_STATE', 'android.permission-group.AFFECTS_BATTERY', 1, 'Allows applications to enter Wi-Fi Multicast mode.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_WIFI_STATE', 'CHANGE_WIFI_STATE', 'android.permission-group.NETWORK', 1, 'Allows applications to change Wi-Fi connectivity state.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CLEAR_APP_CACHE', 'CLEAR_APP_CACHE', 'android.permission-group.SYSTEM_TOOLS', 2, 'Allows an application to clear the caches of all installed applications on the device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CONTROL_LOCATION_UPDATES', 'CONTROL_LOCATION_UPDATES', 'ungrouped', 6, 'Allows enabling/disabling location update notifications from the radio.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DELETE_CACHE_FILES', 'DELETE_CACHE_FILES', 'ungrouped', 2, 'Old permission for deleting an apps cache files, no longer used, but signals for us to quietly ignore calls instead of throwing an exception.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DELETE_PACKAGES', 'DELETE_PACKAGES', 'ungrouped', 6, 'Allows an application to delete packages.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DIAGNOSTIC', 'DIAGNOSTIC', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows applications to RW to diagnostic resources.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DISABLE_KEYGUARD', 'DISABLE_KEYGUARD', 'android.permission-group.SCREENLOCK', 1, 'Allows applications to disable the keyguard if it is not secure.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DUMP', 'DUMP', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows an application to retrieve state dump information from system services.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.EXPAND_STATUS_BAR', 'EXPAND_STATUS_BAR', 'android.permission-group.STATUS_BAR', 1, 'Allows an application to expand or collapse the status bar.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.FACTORY_TEST', 'FACTORY_TEST', 'ungrouped', 6, 'Run as a manufacturer test application, running as the root user.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.FOREGROUND_SERVICE', 'FOREGROUND_SERVICE', 'ungrouped', 1, 'Allows a regular application to use Service.startForeground.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_ACCOUNTS', 'GET_ACCOUNTS', 'android.permission-group.ACCOUNTS', 4, 'Allows access to the list of accounts in the Accounts Service.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_ACCOUNTS_PRIVILEGED', 'GET_ACCOUNTS_PRIVILEGED', 'ungrouped', 2, 'Allows access to the list of accounts in the Accounts Service.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_PACKAGE_SIZE', 'GET_PACKAGE_SIZE', 'android.permission-group.SYSTEM_TOOLS', 1, 'Allows an application to find out the space used by any package.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_TASKS', 'GET_TASKS', 'android.permission-group.APP_INFO', 5, 'This constant was deprecated in API level 21. No longer enforced.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GLOBAL_SEARCH', 'GLOBAL_SEARCH', 'ungrouped', 2, 'This permission can be used on content providers to allow the global search system to access their data.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.HIDE_OVERLAY_WINDOWS', 'HIDE_OVERLAY_WINDOWS', 'ungrouped', 1, 'Allows an app to prevent non-system-overlay windows from being drawn on top of it')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.HIGH_SAMPLING_RATE_SENSORS', 'HIGH_SAMPLING_RATE_SENSORS', 'ungrouped', 1, 'Allows an app to access sensor data with a sampling rate greater than 200 Hz.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INSTALL_LOCATION_PROVIDER', 'INSTALL_LOCATION_PROVIDER', 'ungrouped', 6, 'Allows an application to install a location provider into the Location Manager.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INSTALL_PACKAGES', 'INSTALL_PACKAGES', 'ungrouped', 6, 'Allows an application to install packages.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.launcher.permission.INSTALL_SHORTCUT', 'INSTALL_SHORTCUT', 'android.permission-group.SYSTEM_TOOLS', 1, 'Allows an application to install a shortcut in Launcher.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INSTANT_APP_FOREGROUND_SERVICE', 'INSTANT_APP_FOREGROUND_SERVICE', 'ungrouped', 2, 'Allows an instant app to create foreground services.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INTERACT_ACROSS_PROFILES', 'INTERACT_ACROSS_PROFILES', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows interaction across profiles in the same profile group.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INTERNET', 'INTERNET', 'android.permission-group.NETWORK', 1, 'Allows applications to open network sockets.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.KILL_BACKGROUND_PROCESSES', 'KILL_BACKGROUND_PROCESSES', 'android.permission-group.APP_INFO', 1, 'Allows an application to call ActivityManager.killBackgroundProcesses(String). This may cause other apps to stop running.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.LOADER_USAGE_STATS', 'LOADER_USAGE_STATS', 'ungrouped', 2, 'Allows a data loader to read a packages access logs.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.LOCATION_HARDWARE', 'LOCATION_HARDWARE', 'ungrouped', 6, 'Allows an application to use location features in hardware, such as the geofencing api.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_DOCUMENTS', 'MANAGE_DOCUMENTS', 'android.permission-group.STORAGE', 6, 'Allows an application to manage access to documents, usually as part of a document picker.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_EXTERNAL_STORAGE', 'MANAGE_EXTERNAL_STORAGE', 'ungrouped', 2, 'Allows an application a broad access to external storage in scoped storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_ONGOING_CALLS', 'MANAGE_ONGOING_CALLS', 'ungrouped', 2, 'Allows to query ongoing call details and manage ongoing calls')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_OWN_CALLS', 'MANAGE_OWN_CALLS', 'ungrouped', 1, 'Allows a calling application which manages it own calls through the self-managed ConnectionService APIs.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MASTER_CLEAR', 'MASTER_CLEAR', 'ungrouped', 6, 'Not for use by third-party applications.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MEDIA_CONTENT_CONTROL', 'MEDIA_CONTENT_CONTROL', 'ungrouped', 6, 'Allows an application to know what content is playing and control its playback.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MODIFY_AUDIO_SETTINGS', 'MODIFY_AUDIO_SETTINGS', 'android.permission-group.AUDIO_SETTINGS', 1, 'Allows an application to modify global audio settings.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MODIFY_PHONE_STATE', 'MODIFY_PHONE_STATE', 'android.permission-group.PHONE_CALLS', 6, 'Allows the app to control the phone features of the device. An app with this permission can switch networks, turn the phone radio on and off and the like without ever notifying you.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MOUNT_FORMAT_FILESYSTEMS', 'MOUNT_FORMAT_FILESYSTEMS', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows formatting file systems for removable storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MOUNT_UNMOUNT_FILESYSTEMS', 'MOUNT_UNMOUNT_FILESYSTEMS', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows mounting and unmounting file systems for removable storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.NFC', 'NFC', 'android.permission-group.NETWORK', 1, 'Allows applications to perform I/O operations over NFC.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.NFC_PREFERRED_PAYMENT_INFO', 'NFC_PREFERRED_PAYMENT_INFO', 'ungrouped', 1, 'Allows applications to receive NFC preferred payment service information.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.NFC_TRANSACTION_EVENT', 'NFC_TRANSACTION_EVENT', 'ungrouped', 1, 'Allows applications to receive NFC transaction events.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.PACKAGE_USAGE_STATS', 'PACKAGE_USAGE_STATS', 'ungrouped', 2, 'Allows an application to collect component usage statistics. Declaring the permission implies intention to use the API and the user of the device can grant permission through the Settings application.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.PERSISTENT_ACTIVITY', 'PERSISTENT_ACTIVITY', 'android.permission-group.APP_INFO', 5, 'This permission is no longer supported. This constant was deprecated in API level 15. This functionality will be removed in the future; please do not use. Allow an application to make its activities persistent.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.PROCESS_OUTGOING_CALLS', 'PROCESS_OUTGOING_CALLS', 'android.permission-group.PHONE_CALLS', 5, 'This permission is no longer supported. This constant was deprecated in API level 29. Applications should use CallRedirectionService instead of the Intent.ACTION_NEW_OUTGOING_CALL broadcast.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.QUERY_ALL_PACKAGES', 'QUERY_ALL_PACKAGES', 'ungrouped', 1, 'Allows query of any normal app on the device, regardless of manifest declarations.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_CALENDAR', 'READ_CALENDAR', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to read all calendar events stored on your phone, including those of friends or co-workers. This may allow the app to share or save your calendar data, regardless of confidentiality or sensitivity.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_CALL_LOG', 'READ_CALL_LOG', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to read your phones call log, including data about incoming and outgoing calls. This permission allows apps to save your call log data, and malicious apps may share call log data without your knowledge.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_CONTACTS', 'READ_CONTACTS', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to read data about your contacts stored on your phone, including the frequency with which you have called, emailed, or communicated in other ways with specific individuals. This permission allows apps to save your contact data, and malicious apps may share contact data without your knowledge.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_EXTERNAL_STORAGE', 'READ_EXTERNAL_STORAGE', 'android.permission-group.STORAGE', 4, 'Allows an application to read from external storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_INPUT_STATE', 'READ_INPUT_STATE', 'ungrouped', 5, 'This constant was deprecated in API level 16. The API that used this permission has been removed.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_LOGS', 'READ_LOGS', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to read from the systems various log files. This allows it to discover general information about what you are doing with the phone, potentially including personal or private information.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_PHONE_NUMBERS', 'READ_PHONE_NUMBERS', 'ungrouped', 4, 'Allows read access to the devices phone number(s).')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_PHONE_STATE', 'READ_PHONE_STATE', 'android.permission-group.PHONE_CALLS', 4, 'Allows the app to access the phone features of the device. This permission allows the app to determine the phone number and device IDs, whether a call is active, and the remote number connected by a call.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_PRECISE_PHONE_STATE', 'READ_PRECISE_PHONE_STATE', 'ungrouped', 4, 'Allows read only access to precise phone state.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_SMS', 'READ_SMS', 'android.permission-group.MESSAGES', 4, 'Allows the app to read SMS messages stored on your phone or SIM card. This allows the app to read all SMS messages, regardless of content or confidentiality.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_SYNC_SETTINGS', 'READ_SYNC_SETTINGS', 'android.permission-group.SYNC_SETTINGS', 1, 'Allows the app to read the sync settings for an account. For example, this can determine whether the People app is synced with an account.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_SYNC_STATS', 'READ_SYNC_STATS', 'android.permission-group.SYNC_SETTINGS', 1, 'Allows an app to read the sync stats for an account, including the history of sync events and how much data is synced.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.voicemail.permission.READ_VOICEMAIL', 'READ_VOICEMAIL', 'android.permission-group.PERSONAL_INFO', 2, 'Allows an application to read voicemails in the system.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REBOOT', 'REBOOT', 'ungrouped', 6, 'Required to be able to reboot the device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECEIVE_BOOT_COMPLETED', 'RECEIVE_BOOT_COMPLETED', 'android.permission-group.APP_INFO', 1, 'Allows an application to receive the Intent.ACTION_BOOT_COMPLETED that is broadcast after the system finishes booting.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECEIVE_MMS', 'RECEIVE_MMS', 'android.permission-group.MESSAGES', 4, 'Allows the app to receive and process MMS messages. This means the app could monitor or delete messages sent to your device without showing them to you.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECEIVE_SMS', 'RECEIVE_SMS', 'android.permission-group.MESSAGES', 4, 'Allows the app to receive and process SMS messages. This means the app could monitor or delete messages sent to your device without showing them to you.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECEIVE_WAP_PUSH', 'RECEIVE_WAP_PUSH', 'android.permission-group.MESSAGES', 4, 'Allows the app to receive and process WAP messages. This permission includes the ability to monitor or delete messages sent to you without showing them to you.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECORD_AUDIO', 'RECORD_AUDIO', 'android.permission-group.MICROPHONE', 4, 'Allows the app to record audio with the microphone. This permission allows the app to record audio at any time without your confirmation.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REORDER_TASKS', 'REORDER_TASKS', 'android.permission-group.APP_INFO', 1, 'Allows the app to move tasks to the foreground and background. The app may do this without your input.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_COMPANION_PROFILE_WATCH', 'REQUEST_COMPANION_PROFILE_WATCH', 'ungrouped', 1, 'Allows app to request to be associated with a device via CompanionDeviceManager as a \"watch\"')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND', 'REQUEST_COMPANION_RUN_IN_BACKGROUND', 'ungrouped', 1, 'Allows a companion app to run in the background.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'ungrouped', 1, 'Allows a companion app to use data in the background.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_DELETE_PACKAGES', 'REQUEST_DELETE_PACKAGES', 'ungrouped', 1, 'Allows an application to request deleting packages.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'ungrouped', 1, 'Permission an application must hold in order to use Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_INSTALL_PACKAGES', 'REQUEST_INSTALL_PACKAGES', 'ungrouped', 2, 'Allows an application to request installing packages.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE', 'REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE', 'ungrouped', 1, 'Allows an application to subscribe to notifications about the presence status change of their associated companion device')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REQUEST_PASSWORD_COMPLEXITY', 'REQUEST_PASSWORD_COMPLEXITY', 'ungrouped', 1, 'Allows an application to request the screen lock complexity and prompt users to update the screen lock to a certain complexity level.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RESTART_PACKAGES', 'RESTART_PACKAGES', 'android.permission-group.APP_INFO', 5, 'This permission is no longer supported. This constant was deprecated in API level 15.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SCHEDULE_EXACT_ALARM', 'SCHEDULE_EXACT_ALARM', 'ungrouped', 1, 'Allows an app to use exact alarm scheduling APIs to perform timing sensitive background work.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SEND_RESPOND_VIA_MESSAGE', 'SEND_RESPOND_VIA_MESSAGE', 'android.permission-group.MESSAGES', 6, 'Allows an application (Phone) to send a request to other applications to handle the respond-via-message action during incoming calls.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SEND_SMS', 'SEND_SMS', 'android.permission-group.MESSAGES', 4, 'Allows the app to send SMS messages. This may result in unexpected charges. Malicious apps may cost you money by sending messages without your confirmation.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.alarm.permission.SET_ALARM', 'SET_ALARM', 'android.permission-group.DEVICE_ALARMS', 1, 'Allows an application to broadcast an Intent to set an alarm for the user.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_ALWAYS_FINISH', 'SET_ALWAYS_FINISH', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to control whether activities are always finished as soon as they go to the background. Never needed for normal apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_ANIMATION_SCALE', 'SET_ANIMATION_SCALE', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows the app to change the global animation speed (faster or slower animations) at any time.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_DEBUG_APP', 'SET_DEBUG_APP', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to turn on debugging for another app. Malicious apps may use this to kill other apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_PREFERRED_APPLICATIONS', 'SET_PREFERRED_APPLICATIONS', 'android.permission-group.SYSTEM_TOOLS', 5, 'This permission is no longer supported. This constant was deprecated in API level 15. Allows the app to modify your preferred apps. Malicious apps may silently change the apps that are run, spoofing your existing apps to collect private data from you.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_PROCESS_LIMIT', 'SET_PROCESS_LIMIT', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to control the maximum number of processes that will run. Never needed for normal apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_TIME', 'SET_TIME', 'android.permission-group.SYSTEM_CLOCK', 6, 'Allows applications to set the system time directly.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_TIME_ZONE', 'SET_TIME_ZONE', 'android.permission-group.SYSTEM_CLOCK', 6, 'Allows applications to set the system time zone directly.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_WALLPAPER', 'SET_WALLPAPER', 'android.permission-group.WALLPAPER', 1, 'Allows applications to set the wallpaper.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_WALLPAPER_HINTS', 'SET_WALLPAPER_HINTS', 'android.permission-group.WALLPAPER', 1, 'Allows applications to set the wallpaper hints.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SIGNAL_PERSISTENT_PROCESSES', 'SIGNAL_PERSISTENT_PROCESSES', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allow an application to request that a signal be sent to all persistent processes.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SMS_FINANCIAL_TRANSACTIONS', 'SMS_FINANCIAL_TRANSACTIONS', 'ungrouped', 5, 'This constant was deprecated in API level S. The API that used this permission is no longer functional.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.START_VIEW_PERMISSION_USAGE', 'START_VIEW_PERMISSION_USAGE', 'ungrouped', 2, 'Allows the holder to start the permission usage screen for an app.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.STATUS_BAR', 'STATUS_BAR', 'android.permission-group.STATUS_BAR', 6, 'Allows an application to open, close, or disable the status bar and its icons.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SYSTEM_ALERT_WINDOW', 'SYSTEM_ALERT_WINDOW', 'android.permission-group.DISPLAY', 2, 'Allows the app to draw on top of other applications or parts of the user interface. They may interfere with your use of the interface in any application, or change what you think you are seeing in other applications.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.TRANSMIT_IR', 'TRANSMIT_IR', 'android.permission-group.AFFECTS_BATTERY', 1, 'Allows using the devices IR transmitter, if available.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.launcher.permission.UNINSTALL_SHORTCUT', 'UNINSTALL_SHORTCUT', 'android.permission-group.SYSTEM_TOOLS', 5, 'This permission is no longer supported. Dont use this permission in your app. Allows the application to remove Homescreen shortcuts without user intervention.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.UPDATE_DEVICE_STATS', 'UPDATE_DEVICE_STATS', 'ungrouped', 6, 'Allows an application to update device statistics.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_BIOMETRIC', 'USE_BIOMETRIC', 'ungrouped', 1, 'Allows an app to use device supported biometric modalities.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_FINGERPRINT', 'USE_FINGERPRINT', 'ungrouped', 5, 'This constant was deprecated in API level 28. Applications should request USE_BIOMETRIC instead')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_FULL_SCREEN_INTENT', 'USE_FULL_SCREEN_INTENT', 'ungrouped', 1, 'Required for apps targeting Build.VERSION_CODES.Q that want to use notification full screen intents.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER', 'USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER', 'ungrouped', 2, 'Allows to read device identifiers and use ICC based authentication like EAP-AKA.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_SIP', 'USE_SIP', 'android.permission-group.PHONE_CALLS', 4, 'Allows the app to use the SIP service to make/receive Internet calls.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.VIBRATE', 'VIBRATE', 'android.permission-group.AFFECTS_BATTERY', 1, 'Allows access to the vibrator.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WAKE_LOCK', 'WAKE_LOCK', 'android.permission-group.AFFECTS_BATTERY', 1, 'Allows using PowerManager WakeLocks to keep processor from sleeping or screen from dimming.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_APN_SETTINGS', 'WRITE_APN_SETTINGS', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows the app to change network settings and to intercept and inspect all network traffic, for example to change the proxy and port of any APN. Malicious apps may monitor, redirect, or modify network packets without your knowledge.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_CALENDAR', 'WRITE_CALENDAR', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to add, remove, change events that you can modify on your phone, including those of friends or co-workers. This may allow the app to send messages that appear to come from calendar owners, or modify events without the owners knowledge.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_CALL_LOG', 'WRITE_CALL_LOG', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to read your phones call log, including data about incoming and outgoing calls. This permission allows apps to save your call log data, and malicious apps may share call log data without your knowledge.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_CONTACTS', 'WRITE_CONTACTS', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to modify the data about your contacts stored on your phone, including the frequency with which you have called, emailed, or communicated in other ways with specific contacts. This permission allows apps to delete contact data.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE', 'android.permission-group.STORAGE', 4, 'Allows an application to write to external storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_GSERVICES', 'WRITE_GSERVICES', 'android.permission-group.ACCOUNTS', 6, 'Allows an application to modify the Google service map.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_SECURE_SETTINGS', 'WRITE_SECURE_SETTINGS', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to modify the systems secure settings data. Not for use by normal apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_SETTINGS', 'WRITE_SETTINGS', 'android.permission-group.SYSTEM_TOOLS', 2, 'Allows the app to modify the systems settings data. Malicious apps may corrupt your systems configuration.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_SYNC_SETTINGS', 'WRITE_SYNC_SETTINGS', 'android.permission-group.SYNC_SETTINGS', 1, 'Allows an app to modify the sync settings for an account. For example, this can be used to enable sync of the People app with an account.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.voicemail.permission.WRITE_VOICEMAIL', 'WRITE_VOICEMAIL', 'android.permission-group.PERSONAL_INFO', 2, 'Allows an application to modify and remove existing voicemails in the system.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_ALL_EXTERNAL_STORAGE', 'ACCESS_ALL_EXTERNAL_STORAGE', 'android.permission-group.DEVELOPMENT_TOOLS', 6, 'Allows the app to access external storage for all users.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.FLASHLIGHT', 'FLASHLIGHT', 'android.permission-group.AFFECTS_BATTERY', 1, 'Allows the app to control the flashlight.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CAMERA_DISABLE_TRANSMIT_LED', 'CAMERA_DISABLE_TRANSMIT_LED', 'android.permission-group.CAMERA', 4, 'Allows a pre-installed system application to disable the camera use indicator LED.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_WIMAX_STATE', 'ACCESS_WIMAX_STATE', 'android.permission-group.NETWORK', 4, 'Allows the app to determine whether WiMAX is enabled and information about any WiMAX networks that are connected.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_WIMAX_STATE', 'CHANGE_WIMAX_STATE', 'android.permission-group.NETWORK', 4, 'Allows the app to connect the phone to and disconnect the phone from WiMAX networks.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.DOWNLOAD_WITHOUT_NOTIFICATION', 'DOWNLOAD_WITHOUT_NOTIFICATION', 'android.permission-group.NETWORK', 4, 'Allows the app to download files through the download manager without any notification being shown to the user.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_ACTIVITY_STACKS', 'MANAGE_ACTIVITY_STACKS', 'android.permission-group.APP_INFO', 4, 'Allows the app to add, remove, and modify the activity stacks in which other apps run. Malicious apps may disrupt the behavior of other apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REMOVE_TASKS', 'REMOVE_TASKS', 'android.permission-group.APP_INFO', 4, 'Allows the app to remove tasks and kill their apps. Malicious apps may disrupt the behavior of other apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_SOCIAL_STREAM', 'READ_SOCIAL_STREAM', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to access and sync social updates from you and your friends. Be careful when sharing information -- this allows the app to read communications between you and your friends on social networks, regardless of confidentiality. Note: this permission may not be enforced on all social networks.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_SOCIAL_STREAM', 'WRITE_SOCIAL_STREAM', 'android.permission-group.SOCIAL_INFO', 4, 'Allows the app to display social updates from your friends. Be careful when sharing information -- this allows the app to produce messages that may appear to come from a friend. Note: this permission may not be enforced on all social networks.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.BIND_CALL_SERVICE', 'BIND_CALL_SERVICE', 'android.permission-group.PHONE_CALLS', 4, 'Allows the app to control when and how the user sees the in-call screen.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ASEC_ACCESS', 'ASEC_ACCESS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to get information on internal storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_MOCK_LOCATION', 'ACCESS_MOCK_LOCATION', 'android.permission-group.SYSTEM_TOOLS', 4, 'Create mock location sources for testing or install a new location provider. This allows the app to override the location and/or status returned by other location sources such as GPS or location providers.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.CHANGE_BACKGROUND_DATA_SETTING', 'CHANGE_BACKGROUND_DATA_SETTING', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to change the background data usage setting.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_DETAILED_TASKS', 'GET_DETAILED_TASKS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to retrieve detailed information about currently and recently running tasks. Malicious apps may discover private information about other apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.FORCE_STOP_PACKAGES', 'FORCE_STOP_PACKAGES', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to forcibly stop other apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.START_ANY_ACTIVITY', 'START_ANY_ACTIVITY', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to start any activity, regardless of permission protection or exported state.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ASEC_CREATE', 'ASEC_CREATE', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to create internal storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ASEC_RENAME', 'ASEC_RENAME', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to rename internal storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_USERS', 'MANAGE_USERS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows apps to manage users on the device, including query, creation and deletion.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SUBSCRIBED_FEEDS_READ', 'SUBSCRIBED_FEEDS_READ', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to get details about the currently synced feeds.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.launcher.permission.READ_SETTINGS', 'READ_SETTINGS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to read the settings and shortcuts in Home.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.GET_APP_OPS_STATS', 'GET_APP_OPS_STATS', 'android.permission-group.SYSTEM_TOOLS', 6, 'Allows the app to retrieve collected application operation statistics. Not for use by normal apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ASEC_MOUNT_UNMOUNT', 'ASEC_MOUNT_UNMOUNT', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to mount/unmount internal storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SUBSCRIBED_FEEDS_WRITE', 'SUBSCRIBED_FEEDS_WRITE', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to modify your currently synced feeds. Malicious apps may change your synced feeds.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.SET_SCREEN_COMPATIBILITY', 'SET_SCREEN_COMPATIBILITY', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to control the screen compatibility mode of other applications. Malicious applications may break the behavior of other applications.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ASEC_DESTROY', 'ASEC_DESTROY', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to destroy internal storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INTERACT_ACROSS_USERS', 'INTERACT_ACROSS_USERS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to perform actions across different users on the device. Malicious apps may use this to violate the protection between users.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.INTERACT_ACROSS_USERS_FULL', 'INTERACT_ACROSS_USERS_FULL', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows all possible interactions across users.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.launcher.permission.WRITE_SETTINGS', 'WRITE_SETTINGS', 'android.permission-group.SYSTEM_TOOLS', 4, 'Allows the app to change the settings and shortcuts in Home.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_USER_DICTIONARY', 'READ_USER_DICTIONARY', 'android.permission-group.USER_DICTIONARY', 1, 'Allows the app to read all words, names and phrases that the user may have stored in the user dictionary.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.gtalkservice.permission.GTALK_SERVICE', 'GTALK_SERVICE', 'android.permission-group.MESSAGES', 4, 'Used for server cloud to device messages and for sync notifications. Google Talk uses this service to exchange messages and to synchronize presence status. Malicious apps could use this service to transmit excess data.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_SMS', 'WRITE_SMS', 'android.permission-group.MESSAGES', 4, 'Allows the app to write to SMS messages stored on your phone or SIM card. Malicious apps may delete your messages.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RECEIVE_EMERGENCY_BROADCAST', 'RECEIVE_EMERGENCY_BROADCAST', 'android.permission-group.MESSAGES', 6, 'Allows the app to receive and process emergency broadcast messages. This permission is only available to system apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.providers.talk.permission.READ_ONLY', 'READ_ONLY', 'android.permission-group.MESSAGES', 4, 'Allows apps to read data from the Google Talk content provider.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.providers.talk.permission.WRITE_ONLY', 'WRITE_ONLY', 'android.permission-group.MESSAGES', 4, 'Allows apps to write data to the Google Talk content provider.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.email.permission.READ_ATTACHMENT', 'READ_ATTACHMENT', 'android.permission-group.MESSAGES', 4, 'Allows the app to read your email attachments.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_CELL_BROADCASTS', 'READ_CELL_BROADCASTS', 'android.permission-group.MESSAGES', 4, 'Allows the app to read cell broadcast messages received by your device. Cell broadcast alerts are delivered in some locations to warn you of emergency situations. Malicious apps may interfere with the performance or operation of your device when an emergency cell broadcast is received.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_MEDIA_STORAGE', 'WRITE_MEDIA_STORAGE', 'android.permission-group.STORAGE', 4, 'Allows the app to modify the contents of the internal media storage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_USER_DICTIONARY', 'WRITE_USER_DICTIONARY', 'android.permission-group.WRITE_USER_DICTIONARY', 1, 'Allows the app to write new words into the user dictionary.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.READ_PROFILE', 'READ_PROFILE', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to read personal profile information stored on your device, such as your name and contact information. This means the app can identify you and may send your profile information to others.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.RETRIEVE_WINDOW_CONTENT', 'RETRIEVE_WINDOW_CONTENT', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to retrieve the content of the active window. Malicious apps may retrieve the entire window content and examine all its text except passwords.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.gms.permission.ACTIVITY_RECOGNITION', 'ACTIVITY_RECOGNITION', 'android.permission-group.PERSONAL_INFO', 4, 'Allows an app to receive periodic updates of your activity level from Google, for example, if you are walking, driving, cycling, or stationary.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.voicemail.permission.READ_WRITE_ALL_VOICEMAIL', 'READ_WRITE_ALL_VOICEMAIL', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to store and retrieve all voicemails that this device can access.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.WRITE_PROFILE', 'WRITE_PROFILE', 'android.permission-group.PERSONAL_INFO', 4, 'Allows the app to change or add to personal profile information stored on your device, such as your name and contact information. This means the app can identify you and may send your profile information to others.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.browser.permission.WRITE_HISTORY_BOOKMARKS', 'WRITE_HISTORY_BOOKMARKS', 'android.permission-group.BOOKMARKS', 4, 'Allows the app to modify the Browser´s history or bookmarks stored on your phone. This may allow the app to erase or modify Browser data. Note: this permission may note be enforced by third-party browsers or other applications with web browsing capabilities.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.android.browser.permission.READ_HISTORY_BOOKMARKS', 'READ_HISTORY_BOOKMARKS', 'android.permission-group.BOOKMARKS', 4, 'Allows the app to read the history of all URLs that the Browser has visited, and all of the Browser´s bookmarks. Note: this permission may not be enforced by third-party browsers or other applications with web browsing capabilities.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.android', 'GOOGLE_AUTH.android', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Android services using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.orkut', 'GOOGLE_AUTH.orkut', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Orkut using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.AUTHENTICATE_ACCOUNTS', 'AUTHENTICATE_ACCOUNTS', 'android.permission-group.ACCOUNTS', 4, 'Allows the app to use the account authenticator capabilities of the AccountManager, including creating accounts and getting and setting their passwords.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.ah', 'GOOGLE_AUTH.ah', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google App Engine using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.doraemon', 'GOOGLE_AUTH.doraemon', 'android.permission-group.ACCOUNTS', 4, 'Allows applications to sign in to the Google Catalogs service using the account(s) stored on this phone.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.lh2', 'GOOGLE_AUTH.lh2', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Picasa Web Albums using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH', 'GOOGLE_AUTH', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to see the usernames (email addresses) of the Google account(s) you have configured.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.wise', 'GOOGLE_AUTH.wise', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Spreadsheets using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.speechpersonalization', 'GOOGLE_AUTH.speechpersonalization', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to the Personalized Speech Recognition service using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.notebook', 'GOOGLE_AUTH.notebook', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Notebook using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.sierra', 'GOOGLE_AUTH.sierra', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Checkout (and potentially make purchases) using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.groups2', 'GOOGLE_AUTH.groups2', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Groups using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.goanna_mobile', 'GOOGLE_AUTH.goanna_mobile', 'android.permission-group.ACCOUNTS', 4, 'Allows applications to sign in to the Google Tasks service using the account(s) stored on this phone.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.knol', 'GOOGLE_AUTH.knol', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Knol using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.blogger', 'GOOGLE_AUTH.blogger', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Blogger using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.sierraqa', 'GOOGLE_AUTH.sierraqa', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Checkout QA using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.speech', 'GOOGLE_AUTH.speech', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Voice Search using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.health', 'GOOGLE_AUTH.health', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Health using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.sierrasandbox', 'GOOGLE_AUTH.sierrasandbox', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Checkout Sandbox using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.writely', 'GOOGLE_AUTH.writely', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Docs using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.print', 'GOOGLE_AUTH.print', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Book Search using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.news', 'GOOGLE_AUTH.news', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google News using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.androidsecure', 'GOOGLE_AUTH.androidsecure', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Android services using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.ig', 'GOOGLE_AUTH.ig', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to iGoogle using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.talk', 'GOOGLE_AUTH.talk', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Talk using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.youtube', 'GOOGLE_AUTH.youtube', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to YouTube using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_ACCOUNTS', 'MANAGE_ACCOUNTS', 'android.permission-group.ACCOUNTS', 4, 'Allows the app to perform operations like adding and removing accounts, and deleting their password.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.jotspot', 'GOOGLE_AUTH.jotspot', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to JotSpot using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.dodgeball', 'GOOGLE_AUTH.dodgeball', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Dodgeball using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.providers.gsf.permission.READ_GSERVICES', 'READ_GSERVICES', 'android.permission-group.ACCOUNTS', 4, 'Allows this app to read Google service configuration data.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.OTHER_SERVICES', 'GOOGLE_AUTH.OTHER_SERVICES', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to unspecified Google services using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.reader', 'GOOGLE_AUTH.reader', 'android.permission-group.ACCOUNTS', 4, 'Allows applications to sign in to the Google Reader service using the account(s) stored on this phone.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.geowiki', 'GOOGLE_AUTH.geowiki', 'android.permission-group.ACCOUNTS', 4, 'Allows applications to sign in to the Google Map maker service using the account(s) stored on this phone.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.grandcentral', 'GOOGLE_AUTH.grandcentral', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Voice using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.adwords', 'GOOGLE_AUTH.adwords', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google AdWords using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.YouTubeUser', 'GOOGLE_AUTH.YouTubeUser', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to see the YouTube username(s) associated with the Google account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.mail', 'GOOGLE_AUTH.mail', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google mail services using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.USE_CREDENTIALS', 'USE_CREDENTIALS', 'android.permission-group.ACCOUNTS', 4, 'Allows the app to request authentication tokens.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.adsense', 'GOOGLE_AUTH.adsense', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google AdSense using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.sitemaps', 'GOOGLE_AUTH.sitemaps', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Webmaster Tools using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.local', 'GOOGLE_AUTH.local', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Maps using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.ALL_SERVICES', 'GOOGLE_AUTH.ALL_SERVICES', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to ALL Google services using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.cp', 'GOOGLE_AUTH.cp', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to access the contacts and profile information of account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.wifi', 'GOOGLE_AUTH.wifi', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Wi-Fi using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.cl', 'GOOGLE_AUTH.cl', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Calendar using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.mobile', 'GOOGLE_AUTH.mobile', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google mobile apps using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.gbase', 'GOOGLE_AUTH.gbase', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Base using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.panoramio', 'GOOGLE_AUTH.panoramio', 'android.permission-group.ACCOUNTS', 4, 'Allows applications to sign in to the Panoramio service using the account(s) stored on this phone.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.googleapps.permission.GOOGLE_AUTH.finance', 'GOOGLE_AUTH.finance', 'android.permission-group.ACCOUNTS', 4, 'Allows apps to sign in to Google Finance using the account(s) stored on this Android device.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.HARDWARE_TEST', 'HARDWARE_TEST', 'android.permission-group.HARDWARE_CONTROLS', 4, 'Allows the app to control various peripherals for the purpose of hardware testing.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.MANAGE_USB', 'MANAGE_USB', 'android.permission-group.HARDWARE_CONTROLS', 4, 'Allows the app to manage preferences and permissions for USB devices.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.ACCESS_MTP', 'ACCESS_MTP', 'android.permission-group.HARDWARE_CONTROLS', 4, 'Allows access to the kernel MTP driver to implement the MTP USB protocol.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.xmpp.permission.USE_XMPP_ENDPOINT', 'USE_XMPP_ENDPOINT', 'android.permission-group.NETWORK', 4, 'Allows Google apps to send and receive XMPP messages to and from Google servers.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.permission.BROADCAST_DATA_MESSAGE', 'BROADCAST_DATA_MESSAGE', 'android.permission-group.NETWORK', 4, 'Can broadcast data messages received from the Internet to apps registered to listen for them.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.gtalkservice.permission.SEND_HEARTBEAT', 'SEND_HEARTBEAT', 'android.permission-group.NETWORK', 4, 'Can send a heartbeat packet to the Google Talk server to ensure the health of the connection.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.c2dm.permission.SEND', 'SEND', 'android.permission-group.NETWORK', 4, 'Can broadcast data messages received from the Internet to apps registered to listen for them.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.xmpp.permission.XMPP_ENDPOINT_BROADCAST', 'XMPP_ENDPOINT_BROADCAST', 'android.permission-group.NETWORK', 4, 'Can broadcast XMPP messages received from the Google servers to apps.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.xmpp.permission.SEND_RECEIVE', 'SEND_RECEIVE', 'android.permission-group.NETWORK', 4, 'Allows Google apps to send and receive XMPP messages to and from Google servers.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.xmpp.permission.BROADCAST', 'BROADCAST', 'android.permission-group.NETWORK', 4, 'Can broadcast XMPP messages received from the Google servers to apps registered to listen for them.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('com.google.android.c2dm.permission.RECEIVE', 'RECEIVE', 'android.permission-group.NETWORK', 4, 'Allows apps to accept cloud to device messages sent by the app´s service. Using this service will incur data usage. Malicious apps could cause excess data usage.')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('android.permission.REAL_GET_TASKS', 'REAL_GET_TASKS', 'android.permission-group.APP_INFO', 2, 'Allows app to obtain information about currently and recently running tasks')"));
        db.execSQL(String.format("INSERT INTO Permissions(idperm, alias, grp, score, des) VALUES ('permission:android.permission.BLUETOOTH_MAP', 'BLUETOOTH_MAP', 'android.permission-group.BLUETOOTH_NETWORK', 6, 'Allows Bluetooth apps to grant exclusive access to email access ')"));
    }

    public void InitializeDBDomains(SQLiteDatabase db) {
        db = this.getWritableDatabase();
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.STORAGE', 'Storage', 'Access the SD card.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.APP_INFO', 'Your applications information', 'Ability to affect behavior of other applications on your device.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.LOCATION', 'Your location', 'Monitor your physical location.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.SYSTEM_TOOLS', 'System tools', 'Lower-level access and control of the system.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.NETWORK', 'Network communication', 'Access various network features.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.ACCOUNTS', 'Your accounts', 'Access the available accounts.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.PERSONAL_INFO', 'Your personal information', 'Direct access to information about you, stored in on your contact card.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.VOICEMAIL', 'Voicemail', 'Direct access to voicemail.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.BLUETOOTH_NETWORK', 'Bluetooth', 'Access devices and networks through Bluetooth.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.MESSAGES', 'Your messages', 'Read and write your SMS, email, and other messages.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.PHONE_CALLS', 'Phone calls', 'Monitor, record, and process phone calls.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.CAMERA', 'Camera', 'Direct access to camera for image or video capture.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.DEVELOPMENT_TOOLS', 'Development tools', 'Features only needed for app developers.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.AFFECTS_BATTERY', 'Affects Battery', 'Use features that can quickly drain battery.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.SCREENLOCK', 'Lock screen', 'Ability to affect behavior of the lock screen on your device.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.STATUS_BAR', 'Status Bar', 'Change the device status bar settings.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.AUDIO_SETTINGS', 'Audio Settings', 'Change audio settings.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.SOCIAL_INFO', 'Your social information', 'Direct access to information about your contacts and social connections.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.SYNC_SETTINGS', 'Sync Settings', 'Access to the sync settings.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.MICROPHONE', 'Microphone', 'Direct access to the microphone to record audio.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.DEVICE_ALARMS', 'Alarm', 'Set the alarm clock.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.WALLPAPER', 'Wallpaper', 'Change the device wallpaper settings.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.DISPLAY', 'Other Application UI', 'Effect the UI of other applications.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.USER_DICTIONARY', 'Read User Dictionary', 'Read words in user dictionary.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.WRITE_USER_DICTIONARY', 'Write User Dictionary', 'Add words to the user dictionary.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.BOOKMARKS', 'Bookmarks and History', 'Direct access to bookmarks and browser history.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.HARDWARE_CONTROLS', 'Hardware controls', 'Direct access to hardware on the handset.')"));
        db.execSQL(String.format("INSERT INTO Domain_Permissions(d_grp, groupname, groupdesc) VALUES ('android.permission-group.SYSTEM_CLOCK', 'Clock', 'Change the device time or timezone.')"));
    }
}

