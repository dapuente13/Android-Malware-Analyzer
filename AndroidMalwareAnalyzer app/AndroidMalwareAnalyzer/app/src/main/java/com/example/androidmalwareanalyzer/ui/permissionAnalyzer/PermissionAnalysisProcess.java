package com.example.androidmalwareanalyzer.ui.permissionAnalyzer;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.method.ScrollingMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppDetails;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppPermissions;
import com.example.androidmalwareanalyzer.ui.appsInformation.AppsListFragment;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;
import com.example.androidmalwareanalyzer.ui.appsInformation.PermissionFragment;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.Callable;

import android.content.Context;
import android.graphics.Typeface;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.TextView;


public class PermissionAnalysisProcess extends Fragment {

    private double mean_score;
    ExpandableListView expandableListView;
    ExpandableListAdapter expandableListAdapter;
    List<String> expandableListTitle;
    List<Double> sorted_scores;
    List<AppScore> sorted_as;
    HashMap<String, List<AppScore>> expandableListDetail;
    MalwareDB dbHelper;
    ListView sortedInstalledApps;
    LAdapter listAdapter;

    public PermissionAnalysisProcess(HashMap<String, List<AppScore>> expandableListDetail, MalwareDB dbHelper, double mean_score, List<Double> sorted_scores, List<AppScore> sorted_as){
        this.expandableListDetail = expandableListDetail;
        this.dbHelper = dbHelper;
        this.mean_score = mean_score;
        this.sorted_scores = sorted_scores;
        this.sorted_as = sorted_as;
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.fragment_permission_analyzer,container,false);

        TextView tv = v.findViewById(R.id.score);
        String score = Math.round(mean_score*100.0)/100.0+"";
        tv.setText(score+"/10");

        ProgressBar pb = v.findViewById(R.id.progress_score);
        pb.setProgress((int)Math.round(mean_score)*10);

        expandableListView = v.findViewById(R.id.expandableListView);
        expandableListTitle = new ArrayList<>(expandableListDetail.keySet());
        int totalinstalledApps = getTotalInstalledApps(getActivity().getPackageManager());
        expandableListAdapter = new CustomExpandableListAdapter(getContext(), expandableListTitle, expandableListDetail, totalinstalledApps);
        expandableListView.setAdapter(expandableListAdapter);


        setListViewHeight(expandableListView, expandableListDetail.size());

        expandableListView.setOnGroupClickListener((parent, v12, groupPosition, id) -> {
            setListViewHeight(parent, groupPosition);
            return false;
        });


        expandableListView.setOnChildClickListener((parent, v1, groupPosition, childPosition, id) -> {
            AppScore as = (AppScore) expandableListAdapter.getChild(groupPosition, childPosition);
            AppPermissions fragment = new AppPermissions(as, dbHelper);
            FragmentManager manager = getParentFragmentManager();
            manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
            return false;
        });

        sortedInstalledApps = v.findViewById(R.id.sorted);

        listAdapter = new LAdapter(getContext(), sorted_scores, sorted_as);
        sortedInstalledApps.setAdapter(listAdapter);

        ViewGroup.LayoutParams params = sortedInstalledApps.getLayoutParams();
        params.height = 177*sorted_scores.size();
        sortedInstalledApps.setLayoutParams(params);
        sortedInstalledApps.requestLayout();

        sortedInstalledApps.setOnItemClickListener((adapterView, view, i, l) -> {
            AppPermissions fragment = new AppPermissions(sorted_as.get(i), dbHelper);
            FragmentManager manager = getParentFragmentManager();
            manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
        });

        return v;
    }


    private int getTotalInstalledApps(PackageManager pm) {
        int app_count = 0;
        List<PackageInfo> packs = pm.getInstalledPackages(pm.GET_PERMISSIONS);
        for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {
                ++app_count;
            }
        }
        return app_count;
    }

    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return (pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }

    public void setListViewHeight(ExpandableListView listView, int group) {
        ExpandableListAdapter listAdapter = (ExpandableListAdapter) listView.getExpandableListAdapter();
        int totalHeight = 0;
        int desiredWidth = View.MeasureSpec.makeMeasureSpec(listView.getWidth(), View.MeasureSpec.EXACTLY);
        for (int i = 0; i < listAdapter.getGroupCount(); i++) {
            View groupItem = listAdapter.getGroupView(i, false, null, listView);
            groupItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

            totalHeight += groupItem.getMeasuredHeight();

            if (((listView.isGroupExpanded(i)) && (i != group))
                    || ((!listView.isGroupExpanded(i)) && (i == group))) {
                for (int j = 0; j < listAdapter.getChildrenCount(i); j++) {
                    View listItem = listAdapter.getChildView(i, j, false, null,
                            listView);
                    listItem.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);

                    totalHeight += listItem.getMeasuredHeight();

                }
                //Add Divider Height
                totalHeight += listView.getDividerHeight() * (listAdapter.getChildrenCount(i) - 1);
            }
        }
        //Add Divider Height
        totalHeight += listView.getDividerHeight() * (listAdapter.getGroupCount() - 1);

        ViewGroup.LayoutParams params = listView.getLayoutParams();
        int height = totalHeight
                + (listView.getDividerHeight() * (listAdapter.getGroupCount() - 1));
        if (height < 10)
            height = 200;
        params.height = height;
        listView.setLayoutParams(params);
        listView.requestLayout();
    }

    public class LAdapter extends BaseAdapter{
        public LayoutInflater layoutInflater;
        public List<Double> sorted_scores;
        public List<AppScore> sorted_as;

        public LAdapter(Context context, List<Double> sorted_scores, List<AppScore> sorted_as) {
            layoutInflater =(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            this.sorted_scores = sorted_scores;
            this.sorted_as = sorted_as;
        }

        @Override
        public int getCount() { return sorted_as.size(); }

        @Override
        public Object getItem(int position) { return position; }

        @Override
        public long getItemId(int position) { return position; }

        @RequiresApi(api = Build.VERSION_CODES.O)
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ViewHolder listViewHolder;
            if(convertView == null){
                listViewHolder = new ViewHolder();
                convertView = layoutInflater.inflate(R.layout.installed_app_list, parent, false);

                listViewHolder.textInListView = convertView.findViewById(R.id.list_app_name);
                listViewHolder.imageInListView = convertView.findViewById(R.id.app_icon);
                listViewHolder.packageInListView=convertView.findViewById(R.id.list_app_package);

                convertView.setTag(listViewHolder);
            }else{
                listViewHolder = (ViewHolder)convertView.getTag();
            }
            listViewHolder.textInListView.setText(sorted_as.get(position).getPInfo().applicationInfo.loadLabel(getActivity().getPackageManager()));
            listViewHolder.imageInListView.setImageDrawable(sorted_as.get(position).getPInfo().applicationInfo.loadIcon(getActivity().getPackageManager()));
            listViewHolder.packageInListView.setText("Score:  " + sorted_scores.get(position) + "/10");

            return convertView;
        }

        class ViewHolder{
            TextView textInListView;
            ImageView imageInListView;
            TextView packageInListView;
        }
    }

}