package com.example.androidmalwareanalyzer.ui.appsInformation;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.core.content.res.ResourcesCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.AppScore;
import com.example.androidmalwareanalyzer.ui.permissionAnalyzer.PermissionAnalysisProcess;

import org.w3c.dom.Text;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class AppPermissions extends Fragment {
    private AppScore as;
    private MalwareDB dbHelper;
    private HashMap<String, List<String>> perms;
    private PermissionsAdapter permAdapter;
    private ExpandableListView perm_list;
    public final String forbidden_key = "Forbidden Permissions";
    public final String dangerous_key = "Dangerous Permissions";
    public final String deprecated_key = "Deprecated Permissions";
    public final String signature_key = "Signature Permissions";
    public final String normal_key = "Normal Permissions";
    public final String unk_key = "Unknown Permissions";


    public AppPermissions(AppScore as, MalwareDB dbHelper){
        this.as = as;
        this.dbHelper = dbHelper;
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View v = inflater.inflate(R.layout.view_permissions,container,false);

        ImageView logo = v.findViewById(R.id.img_perm);
        TextView name = v.findViewById(R.id.name_app);

        logo.setImageDrawable(as.getPInfo().applicationInfo.loadIcon(getActivity().getPackageManager()));
        name.setText(as.getPInfo().applicationInfo.loadLabel(getActivity().getPackageManager()));

        perm_list = v.findViewById(R.id.domain_list);

        List<String> keys = new ArrayList<>();
        perms = new HashMap<>();

        perms.put(forbidden_key, as.getProhib());
        keys.add(forbidden_key);
        perms.put(dangerous_key, as.getDangerous());
        keys.add(dangerous_key);
        perms.put(deprecated_key, as.getDeprec());
        keys.add(deprecated_key);
        perms.put(signature_key, as.getSig());
        keys.add(signature_key);
        perms.put(normal_key, as.getNorm());
        keys.add(normal_key);
        perms.put(unk_key, as.getUnk());
        keys.add(unk_key);

        permAdapter = new PermissionsAdapter(getActivity(), perms, keys);

        perm_list.setAdapter(permAdapter);

        AppDetails ad = new AppDetails(as.getPInfo());

        ad.setListViewHeight(perm_list, perms.size());

        perm_list.setOnGroupClickListener((parent, v12, groupPosition, id) -> {
            ad.setListViewHeight(parent, groupPosition);
            return false;
        });

        perm_list.setOnChildClickListener((parent, v1, groupPosition, childPosition, id) -> {
            String child = (String) permAdapter.getChild(groupPosition, childPosition);
            if (!child.split(" ", 2)[0].equals("No")){
                PermissionFragment fragment = new PermissionFragment(as, dbHelper, child);
                FragmentManager manager = getParentFragmentManager();
                manager.beginTransaction().replace(R.id.nav_host_fragment, fragment, fragment.getTag()).addToBackStack(null).commit();
            }
            return true;
        });

        return v;
    }

    public class PermissionsAdapter extends BaseExpandableListAdapter {

        private HashMap<String, List<String>> domain;
        private List<String> keys;
        private Context context;

        public PermissionsAdapter(Context context, HashMap<String, List<String>> domain, List<String> keys) {
            this.context = context;
            this.domain = domain;
            this.keys = keys;
        }

        @Override
        public int getGroupCount() { return keys.size(); }

        @Override
        public int getChildrenCount(int groupPosition) {
            int out = domain.get(getGroup(groupPosition)).size();

            if (out == 0) { out = 1;}

            return out;
        }

        @Override
        public Object getGroup(int groupPosition) { return keys.get(groupPosition); }

        @Override
        public Object getChild(int groupPosition, int childPosition) {
            List<String> child = domain.get(getGroup(groupPosition));
            if (child.size() == 0){ child.add("No " + keys.get(groupPosition) + " found");}

            return child.get(childPosition);
        }

        @Override
        public long getGroupId(int groupPosition) { return groupPosition; }

        @Override
        public long getChildId(int groupPosition, int childPosition) { return childPosition; }

        @Override
        public boolean hasStableIds() { return false; }

        @Override
        public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {

            if(convertView == null){
                LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                convertView = layoutInflater.inflate(R.layout.view_permissions_item, null);
            }

            String key = keys.get(groupPosition);
            TextView tvGroup = (TextView) convertView.findViewById(R.id.perm_type);
            tvGroup.setText(key);
            ImageView imgGroup = (ImageView)convertView.findViewById(R.id.status);

            int group_size = perms.get(key).size();

            String aux = (String) getChild(groupPosition, 0);

            if(group_size == 0 || aux.split(" ", 2)[0].equals("No")){
                key = "ok";
            }

            imgGroup.setImageDrawable(selectDrawable(key));


            return convertView;
        }

        @Override
        public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {

            if(convertView == null) {
                LayoutInflater layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                convertView = layoutInflater.inflate(R.layout.view_domains_item, null);
            }

            TextView tvItem = (TextView) convertView.findViewById(R.id.tvItem);
            String perm = (String) getChild(groupPosition, childPosition);
            tvItem.setText(perm);


            return convertView;
        }

        @Override
        public boolean isChildSelectable(int groupPosition, int childPosition) { return true; }
    }

    private Drawable selectDrawable(String key){
        Drawable d = null;
        switch (key){
            case "ok": d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_verified_user_24, null); break;
            case forbidden_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_dangerous_24, null); break;
            case dangerous_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_gpp_bad_24, null); break;
            case deprecated_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_report_problem_24, null); break;
            case signature_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_supervised_user_circle_24, null); break;
            case normal_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_info_24, null); break;
            case unk_key: d = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_baseline_device_unknown_24, null);
        }
        return d;
    }
}
