package com.example.androidmalwareanalyzer.ui.prevResults;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;
import com.example.androidmalwareanalyzer.ui.logAnalyzer.LogResult;

import java.util.List;

public class LogElementsAdapter extends RecyclerView.Adapter<LogElementsAdapter.ViewHolder> {

    private Context mContext;
    private List<LogResult.LogInteractions> list;
    private boolean isPermission;

    public LogElementsAdapter(Context context, List<LogResult.LogInteractions> resultsList, boolean permission) {
        mContext = context;
        list = resultsList;
        isPermission = permission;
    }

    public static class ViewHolder extends RecyclerView.ViewHolder {
        public ImageView mImageViewIcon;
        public TextView mTextViewName;
        public TextView mInteractionsNum;
        public ImageView mImageViewArrow;
        public ImageView mImageViewPermission;
        public RelativeLayout mItem;
        public View subItem;
        public RecyclerView subList;

        public ViewHolder(View v) {
            super(v);
            // Get the widgets reference from custom layout
            mImageViewIcon = (ImageView) v.findViewById(R.id.log_result_package_icon);
            mTextViewName = (TextView) v.findViewById(R.id.log_result_app_name);
            mInteractionsNum = (TextView) v.findViewById(R.id.log_result_interactions_num);
            mImageViewArrow = (ImageView) v.findViewById(R.id.arrow_expand);
            mImageViewPermission = (ImageView) v.findViewById(R.id.log_result_permission_icon);
            mItem = (RelativeLayout) v.findViewById(R.id.log_result_item_layout);
            subItem = v.findViewById(R.id.sub_item);
            subList = v.findViewById(R.id.sub_element_list);
        }

        private void bind(LogResult.LogInteractions element, Context mContext, boolean isPermission) {
            boolean expanded = element.isExpanded();

            if (element.getSubElementsSize() == 0)
                expanded = false;

            subItem.setVisibility(expanded ? View.VISIBLE : View.GONE);

            subList.setLayoutManager(new LinearLayoutManager(mContext));
            RecyclerView.Adapter subListAdapter = new LogSubElementsAdapter(mContext, element.getSubElements(), isPermission);
            subList.setAdapter(subListAdapter);
        }

    }
    @Override
    public LogElementsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(mContext).inflate(R.layout.log_result_list_elements, parent, false);
        ViewHolder vh = new ViewHolder(v);
        return vh;
    }

    @Override
    public void onBindViewHolder(LogElementsAdapter.ViewHolder holder, final int position) {
        LogResult.LogInteractions element = list.get(position);

        // Get the current app icon
        Drawable icon = element.getAppIcon();
        // Set the current app icon
        if (icon != null)
            holder.mImageViewIcon.setImageDrawable(icon);
        else {
            switch (element.getElement()) {
                case "SMS/MMS":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_sms_24);
                    break;
                case "Location":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_location_on_24);
                    break;
                case "Camera":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_camera_alt_24);
                    break;
                case "Microphone":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_mic_24);
                    break;
                case "Telephone":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_local_phone_24);
                    break;
                case "Bluetooth":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_bluetooth_24);
                    break;
                case "Internet":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_wifi_24);
                    break;
                case "Messaging":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_chat_24);
                    break;
                case "Storage":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_folder_24);
                    break;
                case "SDcard":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_sd_card_24);
                    break;
                case "Contacts":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_switch_account_24);
                    break;
                case "NFC":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_nfc_24);
                    break;
                case "Mail":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_mail_24);
                    break;
                case "Accounts":
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_people_alt_24);
                    break;
                default:
                    holder.mImageViewIcon.setImageResource(R.drawable.ic_baseline_android_24);
            }
        }
        // Get the current app label
        String label = element.getAppName();
        // Set the current app label
        if (!label.equals(""))
            holder.mTextViewName.setText(label);
        else
            holder.mTextViewName.setText(element.getElement());

        if (element.getSubElementsSize() > 0) {
            if (element.isExpanded())
                holder.mImageViewArrow.setImageResource(R.drawable.ic_baseline_expand_less_24);
            else
                holder.mImageViewArrow.setImageResource(R.drawable.ic_baseline_expand_more_24);
        }

        if (!isPermission)
            holder.mInteractionsNum.setText(element.getTotal_interactions() + "");
        else {
            boolean found = false;
            for (int i = 0; i < element.getSubElementsSize() && !false; ++i) {
                if (!element.isSubElementPermissionGranted(i))
                    found = true;
            }

            if (!found)
                holder.mImageViewPermission.setImageResource(R.drawable.ic_baseline_done_24);
            else
                holder.mImageViewPermission.setImageResource(R.drawable.ic_baseline_report_problem_24);
        }

        holder.bind(element, mContext, isPermission);

        holder.itemView.setOnClickListener(v -> {
            boolean expanded = element.isExpanded();
            element.setExpanded(!expanded);

            notifyItemChanged(position);
        });
    }

    @Override
    public int getItemCount() {
        return list.size();
    }
}