package com.example.androidmalwareanalyzer.ui.prevResults;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwareanalyzer.R;
import com.example.androidmalwareanalyzer.ui.MalwareDB;
import com.example.androidmalwareanalyzer.ui.appsInformation.PackageInfoStruct;
import com.example.androidmalwareanalyzer.ui.appsInformation.PermissionFragment;
import com.example.androidmalwareanalyzer.ui.logAnalyzer.LogResult;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ShowLogResult extends Fragment {
    private String date;
    private String type;
    private ArrayList<PackageInfoStruct> elements_analyzed;
    private Context mContext;
    private ArrayList<LogResult.LogInteractions> logs_result_app_list;
    private ArrayList<LogResult.LogInteractions> logs_result_keyword_list;
    private ArrayList<LogResult.LogInteractions> logs_result_permission_list;

    private class Permission {
        private String element_name;
        private String permission_name;
        private String domain_name;

        public Permission(String element_name, String permission_name, String domain_name) {
            this.element_name = element_name;
            this.permission_name = permission_name;
            this.domain_name = domain_name;
        }

        public String getElement_name() { return element_name; }
        public void setElement_name(String element_name) { this.element_name = element_name; }
        public String getPermission_name() { return permission_name; }
        public void setPermission_name(String permission_name) { this.permission_name = permission_name; }
        public String getDomain_name() { return domain_name; }
        public void setDomain_name(String domain_name) { this.domain_name = domain_name; }
    }

    public ShowLogResult(Context context, String analysis_type, String analysis_date, String elements, String msg) {
        mContext = context;
        type = analysis_type;
        date = analysis_date;
        logs_result_app_list = new ArrayList<>();
        logs_result_keyword_list = new ArrayList<>();
        logs_result_permission_list = new ArrayList<>();
        LogResult result = new LogResult(msg);
        getInstalledApps(elements, result.getList());
        Collections.sort(logs_result_app_list);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_show_log_result, container, false);

        final TextView textView1 = root.findViewById(R.id.log_title_results);
        textView1.setText(type);

        final TextView textView2 = root.findViewById(R.id.log_date_results);
        textView2.setText(date);

        RecyclerView elementsRecyclerView = root.findViewById(R.id.log_elements_list);
        elementsRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        RecyclerView.Adapter elementsAdapter = new ElementsAdapter(getContext(), elements_analyzed);
        elementsRecyclerView.setAdapter(elementsAdapter);

        if (logs_result_app_list.size() > 0) {
            RecyclerView appsRecyclerView = root.findViewById(R.id.result_apps_list);
            appsRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
            RecyclerView.Adapter appsAdapter = new LogElementsAdapter(getContext(), logs_result_app_list, false);
            appsRecyclerView.setAdapter(appsAdapter);
        }
        else {
            TextView textViewNoneApps = root.findViewById(R.id.result_apps_none);
            textViewNoneApps.setText("None");
        }

        if (logs_result_keyword_list.size() > 0) {
            RecyclerView keywordsRecyclerView = root.findViewById(R.id.result_keywords_list);
            keywordsRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
            RecyclerView.Adapter keywordsAdapter = new LogElementsAdapter(getContext(), logs_result_keyword_list, false);
            keywordsRecyclerView.setAdapter(keywordsAdapter);
        }
        else {
            TextView textViewNoneKeywords = root.findViewById(R.id.result_keywords_none);
            textViewNoneKeywords.setText("None");
        }

        setPermissionsList();

        if (logs_result_permission_list.size() > 0) {
            RecyclerView non_permission_RecyclerView = root.findViewById(R.id.non_permission_list);
            non_permission_RecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
            RecyclerView.Adapter non_permission_Adapter = new LogElementsAdapter(getContext(), logs_result_permission_list, true);
            non_permission_RecyclerView.setAdapter(non_permission_Adapter);
        }
        else {
            TextView textViewNonePermission = root.findViewById(R.id.non_permission_none);
            textViewNonePermission.setText("None");
        }

        return root;
    }

    private void getInstalledApps(String elements, ArrayList<LogResult.LogInteractions> logs_result_list) {
        List<PackageInfo> packs = mContext.getPackageManager().getInstalledPackages(0);
        String[] filter_values = elements.split(",");
        boolean found;
        elements_analyzed = new ArrayList<PackageInfoStruct>();

        //Elements analyzed
        if (filter_values.length < 1 || elements.equals("")) {
            PackageInfoStruct newInfo = new PackageInfoStruct();
            newInfo.setAppName("Everything");
            newInfo.setAppIcon(null);
            elements_analyzed.add(newInfo);
        }
        else {
            for (int i = 0; i < filter_values.length; ++i) {
                found = false;
                PackageInfoStruct newInfo = new PackageInfoStruct();

                for (int j = 0; j < packs.size() && !found; ++j) {
                    PackageInfo p = packs.get(j);
                    if (filter_values[i].equals(p.packageName)) {
                        newInfo.setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
                        newInfo.setPackageName(p.packageName);
                        newInfo.setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));
                        found = true;
                    }
                }

                if (!found)
                    newInfo.setAppName(filter_values[i]);

                elements_analyzed.add(newInfo);
            }
        }

        //Elements from result
        for (int j = 0; j < packs.size(); ++j) {
            PackageInfo p = packs.get(j);

            for (int i = 0; i < logs_result_list.size(); ++i) {
                if (logs_result_list.get(i).getElement().equals(p.packageName)) {
                    logs_result_list.get(i).setAppName(p.applicationInfo.loadLabel(mContext.getPackageManager()).toString());
                    logs_result_list.get(i).setAppIcon(p.applicationInfo.loadIcon(mContext.getPackageManager()));

                    logs_result_app_list.add(logs_result_list.get(i));
                }

                found = false;

                for (int k = 0; k < logs_result_list.get(i).getSubElementsSize() && !found; ++k) {
                    if (logs_result_list.get(i).getSubElement(k).equals(p.packageName)) {
                        found = true;
                        logs_result_list.get(i).setSubElementApp(k, p.applicationInfo.loadLabel(mContext.getPackageManager()).toString(), p.applicationInfo.loadIcon(mContext.getPackageManager()));
                    }
                }
            }
        }

        for (int i = 0; i < logs_result_list.size(); ++i) {
            found = false;

            for (int j = 0; j < logs_result_app_list.size(); ++j) {
                if (logs_result_list.get(i).getElement().equals(logs_result_app_list.get(j).getElement()))
                    found = true;
            }

            if (!found)
                logs_result_keyword_list.add(logs_result_list.get(i));
        }
    }

    private List<Permission> generatePermissionList() {
        List<Permission> permissions = new ArrayList<Permission>();

        permissions.add(new Permission("SMS/MMS", "", "android.permission-group.MESSAGES"));
        permissions.add(new Permission("Location", "", "android.permission-group.LOCATION"));
        permissions.add(new Permission("Camera", "", "android.permission-group.CAMERA"));
        permissions.add(new Permission("Microphone", "", "android.permission-group.MICROPHONE"));
        permissions.add(new Permission("Telephone", "", "android.permission-group.PHONE_CALLS"));
        permissions.add(new Permission("Bluetooth", "", "android.permission-group.BLUETOOTH_NETWORK"));
        permissions.add(new Permission("Internet", "", "android.permission-group.NETWORK"));
        permissions.add(new Permission("Messaging", "", "android.permission-group.NETWORK"));
        permissions.add(new Permission("Storage", "","android.permission-group.STORAGE"));
        permissions.add(new Permission("SDcard", "", "android.permission-group.STORAGE"));
        permissions.add(new Permission("Contacts", "", "android.permission-group.SOCIAL_INFO"));
        permissions.add(new Permission("NFC", "android.permission.NFC", ""));
        permissions.add(new Permission("Mail", "", "android.permission-group.MESSAGES"));
        permissions.add(new Permission("Accounts", "", "android.permission-group.ACCOUNTS"));

        return permissions;
    }

    private List<String> getGrantedPermissions(final String appPackage) {
        List<String> granted = new ArrayList<String>();
        try {
            PackageInfo pi = mContext.getPackageManager().getPackageInfo(appPackage, PackageManager.GET_PERMISSIONS);
            for (int i = 0; i < pi.requestedPermissions.length; i++) {
                if ((pi.requestedPermissionsFlags[i] & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0) {
                    granted.add(pi.requestedPermissions[i]);
                }
            }
        } catch (Exception e) {
        }
        return granted;
    }

    private void setPermissionsList() {
        boolean found, found2;
        MalwareDB dbHelper = new MalwareDB(getContext());

        List<Permission> permissions_needed = generatePermissionList();

        for (int i = 0;  i < logs_result_app_list.size(); ++i) {
            List<String> granted_permissions = getGrantedPermissions(logs_result_app_list.get(i).getElement());

            for (int k = 0; k < logs_result_app_list.get(i).getSubElementsSize(); ++k) {
                found = false;

                for (int q = 0; q < permissions_needed.size() && !found; ++q) {
                    if (logs_result_app_list.get(i).getSubElement(k).equals(permissions_needed.get(q).getElement_name())) {
                        found = true;
                        found2 = false;

                        for (int j = 0; j < granted_permissions.size() && !found2; ++j) {
                            PermissionFragment.PermissionInformation perm = dbHelper.getPermission(granted_permissions.get(j));
                            if (!permissions_needed.get(q).getDomain_name().equals("")) {
                                if (permissions_needed.get(q).getDomain_name().equals(perm.getDomain_id())) {
                                    found2 = true;
                                    logs_result_app_list.get(i).setSubElementPermissionGranted(k, true);
                                }
                            }
                            else {
                                if (permissions_needed.get(q).getPermission_name().equals(perm.getPerm_id())) {
                                    found2 = true;
                                    logs_result_app_list.get(i).setSubElementPermissionGranted(k, true);
                                }
                            }
                        }
                    }
                }
            }

            if (logs_result_app_list.get(i).getSubElementsSize() > 0)
                logs_result_permission_list.add(logs_result_app_list.get(i));
        }

        for (int i = 0; i < logs_result_keyword_list.size(); ++i) {
            found = false;

            for (int j = 0; j < permissions_needed.size() && !found; ++j) {
                if (logs_result_keyword_list.get(i).getElement().equals(permissions_needed.get(j).getElement_name())) {
                    found = true;

                    for (int k = 0; k < logs_result_keyword_list.get(i).getSubElementsSize(); ++k) {
                        List<String> granted_permissions = getGrantedPermissions(logs_result_keyword_list.get(i).getSubElement(k));
                        found2 = false;

                        for (int q = 0; q < granted_permissions.size() && !found2; ++q) {
                            PermissionFragment.PermissionInformation perm = dbHelper.getPermission(granted_permissions.get(q));

                            if (!permissions_needed.get(j).getDomain_name().equals("")) {
                                if (permissions_needed.get(j).getDomain_name().equals(perm.getDomain_id())) {
                                    found2 = true;
                                    logs_result_keyword_list.get(i).setSubElementPermissionGranted(k, true);
                                }
                            }
                            else {
                                if (permissions_needed.get(j).getPermission_name().equals(perm.getPerm_id())) {
                                    found2 = true;
                                    logs_result_keyword_list.get(i).setSubElementPermissionGranted(k, true);
                                }
                            }
                        }
                    }

                    if (logs_result_keyword_list.get(i).getSubElementsSize() > 0)
                        logs_result_permission_list.add(logs_result_keyword_list.get(i));
                }
            }
        }

        dbHelper.close();
    }
}
